js是什么：
    js（JavaScript）是运行在客户端的编程语言（脚本语言）、弱类型（动态）语言，是解释型语言，解释型语言就是执行一行代码就立即转换成机器语言，并执行返回结果，有点像吃火锅，边吃边下菜加工，同时进行，和编译型语言不同。
    编译型语言就是全部先转换成机器语言，再执行，没转换完成，程序不会执行的，像炒菜，都炒好再吃饭。
js运行环境：
    js是运行在浏览器上的，浏览器本身并不会执行js代码，而是通过内置的JavaScript引擎（解释器）来执行js代码，js引擎执行时会逐行将js代码转换为源码（机器语言0或1），然后由计算机去执行。
js执行顺序：
    js代码运行顺序是从上到下，逐行执行。整个js文件，如果执行到某一处报错，它下面的js代码都不会执行。
浏览器构成：
    浏览器分为2部分：
        渲染引擎：也叫内核，用来解析html和css的。
        js引擎：也叫js解释器，用来读取网页中的js代码，对其处理后运行。
js书写位置，3种：
    行内式：
        在标签里写on开头的属性，例如onclick（鼠标单击）属性，属性值用" "引起来，引号里面写js输入输出语句，用( )括起来，括号里的字符串用' '引起来,如下：。
            onclick="alert('字符串')"
    内嵌式：
        在html的head标签内写script标签，在script标签里写js代码，所有js代码都以分号结束，如下：
            <script>
                js代码....;
            </script>
    外部引入式：
        创建后缀为.js的文件，将文件用<script>标签的src属性引入，src属性里写js文件路径，script是个双标签，引入外部文件时标签中间不能写代码。如下：
            <script src="文件名.js"></script>
js常用的输入输出语句：
    这3种方法都是归属浏览器的。
        prompt():浏览器弹出输出框，用户可以在输入框内输入数据；收集用户输入数据给程序验证的。
        alert():浏览器弹出警示框；输出的，展示给用户看的。
        console.log():浏览器控制台打印输出信息；在浏览器控制台输出的，给程序员测试用的。

什么是变量：
    变量相当于一个储存数据的容器，是程序在内存中申请一块用来存放数据的空间。
声明变量：
    var（variable）是js里的一个关键字，用来声明变量的，用该关键字声明变量后，计算机会自动为变量分配内存空间，来存储变量值的数据。声明变量以;结束，声明多个变量之间用,隔开。
    变量名是自己定义的，我们可以通过变量名来访问内存中为此变量分配的空间。

    声明一个变量：
        var 变量名; 
    声明多个变量：
        var 变量名1,
            变量名2,
            变量名3;
    注意：只声明变量，不赋值，在控制台输出得到的结果是undefined(未定义数据类型)，因为程序也不知道里面存的啥。
         不声明变量、不赋值，直接使用程序会报错。
         不声明变量，直接赋值使用，程序能正常执行，并返回值，但不建议这样做，不符合规范，隐患大。
变量赋值：
    通过 = 号给变量赋值，值后面以;结束，赋值是把右边的值给左边的变量，如下：
        age = 18;
变量初始化：
    声明一个变量，并同时给它赋值，称为变量的初始，如下：
    var age = 18;
变量命名规范：
    由字母(A-Za-z)、数字（0-9）、下划线 _ 、美元符号 $ 组成的。
    大小写敏感，不能以数字开头，不能是js关键字保留字，遵循驼峰命名法（首个单词首字母小写，其它单词首字母必需大写）。
    不能使用 name 为变量名，因为在很多浏览器里name有特殊意义，容易冲突。
更新变量：
    相同的变量，值以最后一个变量为准，例如：
        var myname = '小丽';
            myname = '小明';

数据存储单位：
    bit < Byte < kb < GB < TB <...
    bit（位）：是最小的存储单位，1bit可以保存一个0或者1
    Byte（字节）：1B = 8b
    KB（千字节）：1KB = 1024B
    MB（兆字节）：1MB = 1024KB
    GB(吉字节)：1GB = 1024MB
    TB(太字节)：1TB = 1024GB

数据类型：
    在计算机中，不同类型的数据所占的存储空间不同，为了优化存储，给不同大小的数据分配不同大小的存储空间，所以要定义不同的数据类型来区分。

    变量的数据类型是由js引擎根据变量值来判断的，运行完这行变量 = 变量值;的代码后，变量就确定了数据类型，
    变量的数据类型决定了将在内存中划分多少空间来存储变量值，
    变量的数据类型是动态的，会根据赋不同的变量值而改变，同一个变量，前面的值会被覆盖，数据类型以最后一次变量值为准来划分存储空间。

变量的数据类型，两大类：
    简单数据类型：
        Number:数字类型，（默认值0）包含整型和浮点型；
            Int整型：只能是整数
            Float浮点型：小数。

            数字型进制有：二进制（0b），八进制(0o)，十进制，十六进制(0x),
                js中将数字值转换成 八进制前面加0表示，十六进制前面加0x表示。

            数字型范围：数值的最大值和最小值。
                Number.MAX_VALUE:最大值，1.7976931348623157e+308。
                Number.MIN_VALUE：最小值，5e-324。
            
            数字型三个特殊值：
                Infinity:代表无穷大，大于任何数值。
                -Infinity：表示无穷小，小于任何数值。
                NaN（Not a number）:代表一个非数值。
            isNaN()方法是用来判断非数字的，有返回值false或true，是数字返回flase，不是数字返回true。


        Boolean:布尔值类型，（默认值false）,两个值:true（1）和flase（0）,（js里两个值的首字母要小写），这两个值可以直接用来和其它数字做数学运算；
        
        String:字符串类型，(默认值 "" ), 单引号''或双引号""都行，js里建议使用单引号，因为html里用双引号。
            字符串引号嵌套：
                必须是外双内单，或外单内双，否则报错。
            
            字符串拼接：
                多个字符串之间用 + 进行拼接，字符串可以用 + 拼接任何数据类型，得到的都是新的字符串类型。
                + 在字符串类型里是相连，在数字类型里是相加。

            字符串转义，转义符都是\开头的：     
                \n :换行，n是newline的意思。
                \t ：缩进，t是tab
                \b :空格，b是blank
                \\ :一个斜杠
                \' : 单引号
                \" :双引号

            计算字符串长度：
                存字符串值的变量名.length

        Undefined:未定义类型，声明了变量没有赋值就会产生此数据类型，也可以直接给变量赋值为undefined类型。

        Null:空类型，声明了变量并赋值为null，表示变量的值为空，后面可以按需求给变量赋其它的值覆盖空值。

    复杂数据类型：
        object（对象）

查看数据类型，3种方法：
    1. typeof用来查看数据类型的，返回值是变量的数据类型，语法：
        typeof 变量名
    2. 直接在控制台根据输出数据的颜色看：
        字符串是黑色，
        数字类型是蓝色，
        布尔值是深蓝色，
        未定义类型和空类型是灰色。
    3.字面量，就是通过字面就能直接看出这个值是什么数据类型，字面量是在源代码中一个固定值的表示方法。
转换数据类型：
    转换成字符串类型，3种方法：
        变量名.toString()
        String(要转换的变量名或内容)
        + 隐式转换，和字符串拼接的结果都会是字符串，这种最常用。

    转换成数字类型，要求必需是以数字开头的，否则不转换，直接返回NaN，6种方法：
        parseInt(要转换的变量名或内容)：转换成整数类型，会自动取整，把后面的小数或单位等其他内容都去掉。
        parseFloat(要转换的变量名或内容)：转换成浮点数类型，会保留小数部分，也会自动把后面的单位或其它字符都去掉。
        number(要转换的变量名或内容)：强制转换成数字类型
        - 或 * 或 / 号，隐式转换，利用数学运算将字符串类型的数值转换成数字类型，例如：
            var num = '12' - 0; 得到的结果是数字12。

    转换成布尔型：
        Boolean()
        只有5个特定的值会被转换为flase，代表空、否定的值，如下：
            ''、 0、NaN、null、undefined;
        其它值都会被转换为true。

标识符：
    自定义的变量、属性、函数、参数的名字都是标识符。
        

运算符，5种：
    算术运算符，5种：
        + - * / %(取余，取模，后期主要用于判断一个数能否被另一个数整除，能整除余数为0。)

        浮点数在算术运算时会有精度问题，因为程序会转换成二进制数据再进行运算，导致运算结果会出现最高17位小数的返回值。尽量不要做浮点数运算，也一定不要直接判断两个浮点数是否相等。例如：
            a = 0.3;
            b = 0.1 + 0.2;
            a == b; 会返回false，因为b的计算结果是0.30000000000000004，和0.3是不相等的。

    递增和递减运算符，4种：
        是为了简写 （变量 = 变量 + 1;）的运算符， 开发时，大多使用后置递增/减，并且代码独占一行，例如：num++;或num--;

        递增（++）：表示给变量自加1，必需和变量一起使用，单独运算时，运算结果相同，和其它表达式一起运算时，结果完全不同，两种写法：
            ++变量名 表示前递增，先自加1，再和其它变量运算，并返回值。
            变量名++ 表示后递增，先原值和其它变量运算，并返回值，再自加1.
        递减（--）：表示给变量自减1，必需和变量一起使用，单独运算结果相同，和其它表达式一起运算结果不同，两种写法：
            --变量名 表示前递减，先自减1，再和其它变量运算，并返回值。
            变量名-- 表示后递减，先和其它变量运算，并返回值，再自减1。

    比较运算符（关系运算符），返回值是布尔值，8种：
        < 小于
        > 大于
        >= 大于等于
        <= 小于等于
        == 等于，会隐式转换数据类型，只要两边的值相等，返回结果就是true。
            例如：'16'== 16;结果是true。
        === 全等于，必需要两边的值和数据类型都相同，才会返回true。
        != 不等于
        !== 全不等于

    赋值运算符，6种：
        = 直接赋值
        += 、-= 、*= 、/= 、%= 先加或减或乘或除或取余后再赋值给变量

    
    逻辑运算符，返回值是布尔值，3种：
        &&  与、and
        ||  或 、or
        !  非 、not

        短路运算：
            &&逻辑运算时，只要第一个值的运算结果是false，就会不再继续下面的运算，直接返回第一个值，这种现象较短路运算（也叫逻辑中断）；如果第一个值是true，会继续向下执行，并返回最后一个表达式的值。例如：
                123 && 456; 第一个值是true，会继续向下执行，并返回最后一个值，所以返回结果是456。
                0 && 456; 第一个值是flase，会短路，直接返回第一个值，所以返回结果是0。
            ||逻辑运算时，只要有一个值满足true的条件，就会逻辑中断，直接返回这个值，不再继续向下运算。例如：
                123 || 456;第一个值是true，会短路，直接返回123。
                null || 456 || 789;第一个值是false,继续向下执行，直到某个值为true，返回这个值，并停止运算。这里第二个值为true，所以返回结果是456。
运算符优先级：
    1.（）小括号优先级最高
    2.++ -- ！这3个一元运算符,一元运算符是只有一个对象和运算符号进行运算。
    3.算术运算符，先乘除后加减，两元运算符，两个对象通过运算符进行运算。
    4.关系运算符，> >= < <=
    5.相等运算符，== != === !==
    6.逻辑运算符，先&&后||
    7.赋值运算符
    8.逗号运算符，就是声明多个变量时用，隔开的那个逗号。
    


        

    

        




    





