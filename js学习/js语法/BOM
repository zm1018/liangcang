BOM(browser object model)浏览器对象模型,也就是浏览器的规则,js要在浏览器上运行必需遵守的;
浏览器上打开的每一个窗口都是一个BOM;
window代表整个html文件当前运行的窗口;
window.onload = function() {括号里的代码是当前页面加载完后执行的程序};

浏览器的窗口对象window的方法,所有window的方法都可以将window.省略不写:
    系统对话框,3种:
        alert() 弹出警告框;
        confirm() 弹出一个带确定和取消的提示框;
            返回值:
                点确定返回true;
                点取消返回false;
        prompt() 弹出一个带输入框的确定和取消提示框;
            参数,2个:
                第一个参数:
                    是要显示给用户的内容,
                第二个参数,可选:
                    是输入框里的默认值
            返回值:
                点确定,返回输入框中输入的内容;
                点取消,返回null;

    open()方法
        参数，3个，用,隔开(都是字符串类型):
            第一个参数:
                跳转的url,打开一个新窗口,加载url,
                如果不传第二个参数,将每调用一次open()方法就打开一个新窗口,
                如果传了第二个参数,将每调用一次open()方法都重新加载一次名字为第二个参数的窗口;
            第二个参数:
                给第一个参数打开的窗口起一个名字;
            第三个参数:
                给第一个参数打开的窗口设置样式属性,比如宽、高、是否有滚动条等,值不能带px等单位;
        例如:
            open('https://www.baidu.com','名字', 'width=300,height=300,top=200,left=200');

    history对象:
        是window对象的一种属性,作用是保存用户的上网记录(当前窗口的历史记录),从窗口被打开的那一刻算起;
        历史记录是被打开的窗口的url变化一次才算一个记录(也就是只要当前窗口加载的url不一样就会产生历史记录);
        是每个网页地址栏旁边的左右箭头
        history.length 返回此窗口的历史记录的数量;
        history.back() 后退到上一条历史记录,是每个网页地址栏旁边的左箭头;
        history.forward() 前进到下一条历史记录,是每个网页地址栏旁边的右箭头;
        history.go(n) 后退或前进n条历史记录,或刷新当前窗口
            参数,3种形式:
                0 刷新当前页面;
                正整数 前进n条记录;
                负整数 后退n条记录;

    location对象:
        是window对象的一种属性,代表地址栏,作用是获取地址栏的url,并通过各种属性操作url;
        window对象的document属性也有一个location属性,和window对象的location属性是同一个东西;
            url是什么:
                是统一资源定位符,在全球范围内可以通过url找到要加载的资源;
                格式:
                    中文版本: 协议://IP(主机名、域名):端口号:路径?查询字符串#锚点
                    英文版本: protocol://hostname:port/pathname/?search#hash

        属性:
            location 获取整个url,返回一个对象;
            location.href 获取整个url,返回一个字符串类型;
            
            location.protocol
                获取网络传输协议;
                file: 本地磁盘文件访问,也就是自己电脑磁盘上的文件自己在浏览器打开,别人通过file:开头的url访问是看不到内容的;
                http: 不安全没经过认证的协议,就像没有去工商局注册,没有营业执照的;
                https:证书认证协议,就像开店去工商局注册了,有营业执照的;

            location.hostname
                获取主机名,
                也就是IP(在全球范围内找到你当前网络的地址),是一串数字,换个网络IP就换了,像寄信时的邮政编码,换个地方邮政编码也换了;
                域名是IP的别称,因为IP这串数字不容易记住,所以给这串数字起名字,例如www.baidu.com;
                如果赋值就是设置主机名,并跳转;
                例如:location.hostname = 'zm';

            location.port
                获取端口号,一般情况下访问不到,因为端口号默认是隐藏的;
                是当前电脑中使用网络的软件,系统随机分配给它们的一个编号,范围是0~65535;
                端口号就像寄快递写的收件人是谁,软件相当于住这个地方的人,如果只写了IP,相当于寄到地方了,但不知道谁收;
                如果赋值是设置端口号,并跳转;
                例如:location.port = 8888;
            
            hostname.port
                可以直接定位到当前使用网络的程序软件;
                常用的几个使用频率高的软件有默认的端口号,强制改,也可以改掉:
                    浏览器 8080;
                    http 80;
                    https 443;
                
            location.pathname
                获取当前文件路径,通过IP访问到这台电脑,但电脑里有很多数据,你要访问哪条数据,这里就是哪个路径;
                如果赋值就是设置当前路径名,并跳转;
                例如:location.pathname = 'zm';

            loaction.search
                查询字符串(前后端交互的),就是?后面的一串键值对;
                键是接收值的,值就是日常搜索框输入的搜索内容,提交到后台数据库中获取值相关的内容(查询数据).
            
            location.hash
                获取锚点,也就是#开头的部分,在当前页面进行跳转,类似a链接的锚点;
                如果location.hash属性赋值,是设置#后面的字符串,并跳转;
                例如:location.hash = '#1';
        
        方法:
            location.assign(url)
                在当前窗口跳转这个url;

            location.replace(url)
                在当前窗口替换成参数传的url,不会产生历史记录;

            location.reload()
                刷新当前窗口;
                如果参数传true,表示不经过浏览器缓存强制从服务器重新加载窗口,
                就像第一次打开一个窗口一样,从服务器加载数据,数据是和服务器同步的,但加载速度比较慢,而不是从浏览器缓存里加载数据,浏览器缓存机制会让刷新时加载变快,但数据是第一次打开窗口时从服务器加载的数据,
                如果后台数据库里更新了数据,用户可能看到的还是上一次加载的数据缓存,不一定能看到及时同步更新的数据;


        





