ajax 是异步的 javaScript 和 数据传输(xml);
    它将前台的数据传输到后台,将后台的数据返回到前台,数据传输可以同时进行,互不影响;
    就像人搬东西,左手拿前台数据,右手拿后台数据,互不影响, 而不是一次只拿前台数据,搬完下一趟再去搬后台数据;

数据传输格式,2种:
    xml(像html的写法):
        通过用户自定义的标签,把数据放在标签的内容里,来传输数据;
        优点:
            1.数据种类丰富,都是用户自定义的,标签名可以写任何单词,数据可以写任何内容;
            2.传输数据量非常大,标签可以重复出现,无限写下去;
        缺点:
            1.解析麻烦,
            2.不太适合轻量级数据;

    json(字符串类型,像数组和对象的写法),95%的移动端应用都是json格式:
        优点:
            1.轻量级数据
            2.解析比较轻松
        缺点:
            1.数据种类较少, 比如: 美团,数据种类大都是 图片/名称/价格/销量/评论 这几种;
            2.传输量较小;

任何一个程序都是由很多段代码组成的,这很多段代码就是很多个小程序;
    同步: 就是阻塞,得前一个小程序先运行完,后一个才能运行;
    异步: 就是可以同时运行,互不影响,各执行各的;

实现ajax请求,:

    1.创建ajax对象:
        var 变量 = new XMLHttpRequest();            相当于打开浏览器页面
        IE8以下兼容的写法,2种:
            第一种:
                var xml = null;
                if(window.XMLHttpRequest) {
                    xml = new window.XMLHttpRequest();
                } else{
                    xml = new ActiveXObject('Microsoft.XMLHTTP');
                }
            第二种:
                try{
                    var xml = new XMLHttpRequest();
                }catch(error){
                    var xml = new ActiveXObject('Microsoft.XMLHTTP');
                }

    2.调用open()方法传输数据:
        变量.open("请求方式","url",true);            相当于在浏览器的地址栏输入url
            参数1:请求方式;
            参数2:文件路径;
            参数3: true异步,false同步(默认值);  
    3.调用send()发送请求:                            相当于按enter键
        变量.send();
    4.使用onreadystatechange事件类型,等待数据响应:    相当于按完enter键后加载网页时转圈
        readyState属性,是请求状态,在状态发生变化的时候调用,有4个值:
            0   (初始化)调用open方法之前输出会返回0;
            1   (载入)调用send方法之后,发送请求;
            2   (载入完成)send方法完成,已经接受到所有的响应内容;
            3   (解析)正在解析下载到的数据
            4   (解析完成)可以在客户端调用了, 所以都要判断一下,在值==4的时候输出下载到的数据;
        status属性,(服务器的状态),是请求下载的这个资源的状态码, ==200的时候是下载成功,都要在readyState==4的时候才能接收到这个响应;  
            服务器的状态: 类似你客户端来拿我服务器的东西,我理不理你,让不让你拿,拒绝或者同意都要给你个态度回应你;
        responseText属性,是响应文本,存的是下载成功要输出给用户看的数据,以文本的形式返回给用户;
        responseXML属性,以XML的形式返回给用户;

        

用try..catch 或 try..throw..catch 进行判断比if..else执行效率高, 让代码更强壮,在新增代码时将新增的代码放到try里面执行,可以迅速捕获异常,常用来代码调试和后期维护:
    try{
        尝试执行的代码,如果执行正常,catch中的代码就不执行了;
    }catch(error){
        error 是错误对象,这里输出的是try中的代码执行报错的信息;
        补救代码,try报错时执行这里的代码;
    }

    try{
        尝试执行的代码,如果执行正常,catch中的代码就不执行了;
        throw new Error('错误提示信息');  
        这个throw是手动抛出异常,是程序员故意设置的错误信息,try执行到这行代码,就会停止执行throw下面的,直接去执行catch里的代码, new Error是创建错误对象;
    }catch(error){
        error 错误对象,这里输出的是try中的代码执行报错的信息;
        补救代码,try报错时执行这里的代码;
    }





