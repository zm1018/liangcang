前后端交互流程:
    1. 通过ajax下载数据;
    2.分析下载到的数据,转成对应数据结构;
    3.处理转换后的数据;
    
ajax 是异步的 javaScript 和 数据传输(xml);
    它将前台的数据传输到后台,将后台的数据返回到前台,数据传输可以同时进行,互不影响;
    就像人搬东西,左手拿前台数据,右手拿后台数据,互不影响, 而不是一次只拿前台数据,搬完下一趟再去搬后台数据;

    任何一个程序都是由很多段代码组成的,这很多段代码就是很多个小程序;
        同步: 就是阻塞,得前一个小程序先运行完,后一个才能运行; (open方法里默认是false,同步)
        异步: 就是可以同时运行,互不影响,各执行各的; open方法里写true是异步

数据传输:
    数据传输就像买的整套家具,运输时需要拆分装车,运回家又需要组装起来,家具不是随便拆的,需要按结构组成去拆,数据也是,json像随家具附送的家具组装说明书;
    数据在前端和后端都是通过数据结构(数组/对象)存储,传输时需要拆分,转成2进制传输,二进制传输最有效的方式是字符串,所以数据传输都是通过字符串传输,2种字符串传输格式,xml和json:
        xml(像html的写法):
            通过用户自定义的标签,把数据放在标签的内容里,来传输数据;
            优点:
                1.数据种类丰富,都是用户自定义的,标签名可以写任何单词,数据可以写任何内容;
                2.传输数据量非常大,标签可以重复出现,无限写下去;
            缺点:
                1.解析麻烦,
                2.不太适合轻量级数据;

        json(字符串类型,像数组和对象的写法,不是普通字符串,是json格式的字符串),95%的移动端应用都是json格式:
            优点:
                1.轻量级数据
                2.解析比较轻松
            缺点:
                1.数据种类较少, 比如: 美团,数据种类大都是 图片/名称/价格/销量/评论 这几种;
                2.传输量较小;

            json对象转换方法:
                数据结构转字符串:
                    前端: JSON.stringify(数组/字符串);
                    后端: json_encode();
                字符串转数据结构:
                    前端: JSON.parse(json格式的字符串);
                    后端: json_decode()

实现ajax请求,:

    1.创建ajax对象:
        var 变量 = new XMLHttpRequest();            相当于打开浏览器页面
        IE8以下兼容的写法,2种:
            第一种:
                var xml = null;
                if(window.XMLHttpRequest) {
                    xml = new window.XMLHttpRequest();
                } else{
                    xml = new ActiveXObject('Microsoft.XMLHTTP');
                }
            第二种:
                try{
                    var xml = new XMLHttpRequest();
                }catch(error){
                    var xml = new ActiveXObject('Microsoft.XMLHTTP');
                }

    2.调用open()方法传输数据:
        变量.open("请求方式","url",true);            相当于在浏览器的地址栏输入url
            参数1:请求方式;
            参数2:文件路径;
            参数3: true异步,false同步(默认值);  
    3.调用send()发送请求:                            相当于按enter键
        变量.send();
    4.使用onreadystatechange事件类型,等待数据响应:    相当于按完enter键后加载网页时转圈
        readyState属性,是请求状态,在状态发生变化的时候调用,有4个值:
            0   (初始化)调用open方法之前输出会返回0;
            1   (载入)调用send方法之后,发送请求;
            2   (载入完成)send方法完成,已经接受到所有的响应内容;
            3   (解析)正在解析下载到的数据
            4   (解析完成)可以在客户端调用了, 所以都要判断一下,在值==4的时候输出下载到的数据;
        status属性,(服务器的状态),是请求下载的这个资源的状态码, ==200的时候是下载成功,都要在readyState==4的时候才能接收到这个响应;  
            服务器的状态: 类似你客户端来拿我服务器的东西,我理不理你,让不让你拿,拒绝或者同意都要给你个态度回应你;
        responseText属性,是响应文本,存的是下载成功要输出给用户看的数据,以文本的形式返回给用户;
        responseXML属性,以XML的形式返回给用户;

        

用try..catch 或 try..throw..catch 进行判断比if..else执行效率高, 让代码更强壮,在新增代码时将新增的代码放到try里面执行,可以迅速捕获异常,常用来代码调试和后期维护:
    try{
        尝试执行的代码,如果执行正常,catch中的代码就不执行了;
    }catch(error){
        error 是错误对象,这里输出的是try中的代码执行报错的信息;
        补救代码,try报错时执行这里的代码;
    }

    try{
        尝试执行的代码,如果执行正常,catch中的代码就不执行了;
        throw new Error('错误提示信息');  
        这个throw是手动抛出异常,是程序员故意设置的错误信息,try执行到这行代码,就会停止执行throw下面的,直接去执行catch里的代码, new Error是创建错误对象;
    }catch(error){
        error 错误对象,这里输出的是try中的代码执行报错的信息;
        补救代码,try报错时执行这里的代码;
    }


get请求提交数据:
    数据通过查询字符串用键值对和&拼接,
    通过?将查询字符串拼接在url里,作为参数提交到后台,传给php里的全局get或post变量,数据以数组格式存储,
    再把php里调用数据的键对应的值提取出来,将要输出的内容返回到html页面,
    优点:
        传输数据简单
    缺点:
        不安全,数据都是暴露在url里可见的,
        url不能写太长,所以数据最大只能传输2kb,就无法实现图片/文件/视频等数据的上传了;

ajax实现get请求:
    将要传的参数写在open方法的第二个参数,url后面,用?拼接查询字符串;


post请求提交数据:
    通过浏览器内部进行提交,
    数据不会暴露在url里,安全,传输量大,

ajax实现post请求:
    在send方法之前设置请求头,也就是请求方式
        setRequestHeader('content-type', 'application/x-www-form-urlencoded');
    在send方法里传入参数,是不带?的查询字符串;

查询字符串,2种:
    ?键=值&键=值   这种叫search, ajax的get请求时用;
    键=值&键=值    这种叫querystring, ajax的post请求时用;

form表单提交数据的enctype属性,3种值:
    application/x-www-form-urlencoded:
        这是表单提交的默认格式，不支持文件类型.它的请求格式是键值对.

    multipart/form-data:
        既可以上传键值对，也可以上传文件。当上传的字段是文件时，会有Content-Type来说明文件类型；content-disposition，用来说明字段的一些信息；
        提交文件必须要用这种格式，它会将表单的数据处理为一条消息，以标签为单元，用分隔符分开。所以可以上传多个文件。注意不能设置'Content-Type'='multipart/form-data'. 因为你手动设置了它,那么后面这个boundary=浏览器默认boundary就没了。这个是分界线，服务端是以这个分界线去key值.如果没有分界线服务端就不知道从从哪个位置开始取key`

    text/plain:
        是以纯文本格式（就是一段字符串）发送的. 如果你发送一个对象例如{ name:"leiwuyi", age:12 }一定要对它做JSON.stringfiy()处理，否则将传送[object Object]

