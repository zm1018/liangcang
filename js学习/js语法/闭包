多人协同开发时,只有使用闭包,才能避免全局变量污染(也就是几个人写的代码合并到一个js文件里,声明的变量可能有重名的,那后面的值会覆盖前面的值,导致整个程序无法正常执行);
闭包也就是让局部作用域声明的变量可以实现全局作用域变量的功能;
满足以下特点的叫做闭包:
    1.函数嵌套函数
    2.内部函数使用外部函数的形参和变量
    3.被引用的形参和变量虽然是局部作用域的变量,在函数外面不能访问,但能通过多次调用函数,实现全局变量的功能,让局部变量不会在函数调用结束后被系统的垃圾回收机制回收

立即执行函数写法:
    (function(){
        函数体;
    })();  //这个小括号是调用函数,但小括号的优先级最高,会导致这个函数先调用后声明,所以声明的部分也要用小括号括起来,这样就会从前往后执行,先声明后调用;

闭包写法:
    var aa = (function(){
        var a = 2;
        return function(){  //函数嵌套函数
            a++;  //内部函数使用外部函数的变量a,外面直接输出变量a报错,但调用函数可实现对a累加
            alert(a);
        }
    })();

内存泄漏,针对ie浏览器的:
    闭包就是内存里的钉子户,因为闭包里的变量是常驻内存,不会随着函数调用结束被销毁,所以如果有很多存着很大的数据的变量用闭包,会导致内存被占着,无法释放,导致这部分内存无法再给别的变量使用,就是内存泄漏;
    解决内存泄漏的2种办法,这里针对元素节点,因为元素节点是一个很大的数据,针对ie浏览器,因为id浏览器内存管理机制差:
        window.onload = function(){
            var div = document.getElementById('div1');
            div.onclick = function(){
                例如我们在内部函数里只需要使用这个div的id属性,让整个div元素节点在这里面使用,元素节点非常大,占的内存空间也很大,并且不会因为函数调用完毕被释放;
                console.log(div); //这个内部函数调用外部函数声明的变量div,就是闭包;
            }

            解决内存泄漏1:
            window.onunload = function(){ //这个是页面解构的事件,只有ie浏览器支持
                div.onclick = null;  //将window.onload事件里面的事件都赋值成空值;
                div = null; //将里面的节点都赋值成空值,占着的内存就能释放了
            }
            解决内存泄漏2:
            var id = div.id;//将div的id属性赋值给变量,使用这个变量,闭包也只闭包了存id的变量
            div.onclick = function(){
                console.log(id);  //这样就只是div节点的一个id属性占着内存,消耗的内存资源少;
            }
            div = null;  //将div赋值成空值,这样div节点占的内存就都会被释放掉;

        }



私有变量和私有方法:
    通过闭包写法声明的内部变量和方法,只能内部使用,外面调用报错,就是私有;

    var aa = (function(){ //只要变量名aa和别人取名不同,函数内部变量和方法名重复也不会被覆盖
        var num = 1;  //局部变量只能被函数内部的代码访问
        function aaa(){
            num += 100;
            alert(num);
        }
        function bbb(){
            num *= 10;
            alert(num);
        }
        return {  //返回一个对象,将内部声明的函数赋值给变量,让aaa和bbb变成外层函数私有的
            my: aaa, //调用函数只能使用对外暴露的名字my或my2调用,aaa或者bbb别人无法访问到,
            my2: bbb 
        }
    })()
    私有方法调用:
        aa.my();
        aa.my2();
    
    

    
