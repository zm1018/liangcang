数据属性和访问器属性:
    在javaScript中，对象的属性分为两种类型：
        数据属性和访问器属性,
        对象的属性,必须是两种形式之一，不能同时是两者。

        用Object. getOwnPropertyDescriptor方法来获取一个描述对象,
        用Object. getOwnPropertyDescriptors方法来获取所有描述对象,
        用Object.defineProperty方法来定义一个属性,定义属性时没指定特性的值都默认为false和undefined;或修改一个属性的默认特性,
        用Object.defineProperties方法来定义或修改,一个或多个属性的默认特性;

    数据属性:
        对象的每一个属性都有一个描述对象，用来描述和控制该属性的行为，叫做数据属性：它包含的是一个数据值的位置，在这可以对数据值进行读写,也叫数据描述符,是一个拥有可写或不可写值的属性。
        
        数据属性的4个特性：
　　        configurable：表示能否通过delete删除属性从而重新定义属性，能否修改属性的特性，
                或能否把属性修改为访问器属性，默认为true;
                一旦把属性定义为不可配置的，那么就再也不能把属性定义回可配置的了。
　　        enumerable: 表示该属性是否可枚举，即能否通过for-in循环或Object.keys()返回属性，
                默认值为true,
            writable: 能否修改属性的值，默认值为true,
                当writable为false(并且configurable为true),[[value]]可以通过defineeProperty修改, 但不能直接赋值修改;
            value: 该属性对应的值，默认为undefined,
                读取属性值的时候，从这个位置读；写入属性值时，把新值保存在这个位置;

            注意: 
                如果不指定configurable, writable, enumerable ，则这些属性默认值为true，
                如果不指定value默认值为undefined;
　　　　 

    访问器属性:
        这个属性不包含数据值，包含的是一对get和set方法，在读写访问器属性时，就是通过这两个方法来进行操作处理的。
        也叫存取描述符,是由一对 getter-setter 函数功能来描述的属性。
        如果只声明get方法,不声明set方法,这个属性默认是只读的;

        使用场景:
            例如:如何知道程序访问了对象的哪个属性，又改变了哪个属性？ 
                通过访问器属性 getter 和 setter 特性实现，getter 和 setter 其实是一对方法\函数，你可以在函数内指定回调；
                可以在 getter 里面指定这个属性受访问时要返回的值，同时可以在里面加上回调函数，比方说 alert('你访问了'+属性名)，当你修改值的时候，也可以在里面加上回调函数，比方说 alert('你修改了'+属性名);

        访问器属性的四个特性：
            configurable：表示能否通过delete删除属性从而重新定义属性，能否修改属性的特性，或能否把属性修改为访问器属性，默认为false;
                如果程序后面需要对该属性进行delete操作等，那就在定义访问器属性时，将这个特性设置为true，不然这个会导致后面一些报错的问题。
            enumerable:表示能否通过for-in循环返回属性,默认为false;
            Get：在读取属性时调用的函数,默认值为undefined, getter 是一种获得属性值的方法;
            Set：在写入属性时调用的函数,默认值为undefined, setter是一种设置属性值的方法;

        注意:
            1.如果不指定configurable, writable,则这些属性默认值为false,
            2.如果不指定get, set，则这些属性默认值为undefined;
            3.严格模式下,get,set必需都写,否则报错;


    总结:
        1.属性的两种类型都不能直接定义或修改，要通过Object.defineProperty()这个方法来定义或修改。
        2.如果描述符既没有的value，writable，get和set键，它被视为一个数据描述符。
          如果描述符同时具有value或writable和get或set键，则会引发异常,因为value/writable是数据属性里的,get/set是访问器属性里的;

            
    什么是可枚举性？
            描述对象的enumerable属性，称为”可枚举性“，如果该属性为false，就表示某些操作会忽略当前属性。
            目前,有四个操作会忽略enumerable为false的属性。
            　　for...in循环：只遍历对象自身的属性,和继承的可枚举的属性。
            　　Object.keys()：返回对象自身的所有可枚举的属性的键名。
            　　Object.assign()： 忽略enumerable为false的属性，只拷贝对象自身的可枚举的属性。
            　　JSON.stringify()：只串行化对象自身的可枚举的属性。


    修改一个属性的特性，例如：
        let obj = { foo: 123 };  // 对象obj,对象的属性foo;
        Object.defineProperty(obj, "foo", {
    　　　　configurable: false,
    　　　　enumerable: true,});

    修改多个属性的特性,例如:
        let obj = { foo: 123 };  
        Object.defineProperties(obj, {
            foo: { //修改对象obj已有的属性foo;
        　　　　configurable: false, // 将foo属性修改成不可以用delete删除的;
        　　　　enumerable: true 
            },
            
            a: { //给对象obj新增一个属性a,它的属性值是456,属性值可以修改;
                value: 456,
                writable: true
            }
        });


    获取一个属性的特性,例如:
    　　let obj = { foo: 123 };  // 对象obj,对象的属性foo;
    　　console.log(Object.getOwnPropertyDescriptor(obj, 'foo'));
        输出结果: {
        　　value: 123, // 属性值;
        　　writable: true, // 能否修改属性的值,true是能修改;
        　　enumerable: true,  //能否枚举,true是可枚举;
        　　configurable: true //能否修改属性的特性,或能否修改为访问器属性,或能否delete属性
        　　 }
    
    获取所指定对象的所有自身属性的描述符,例如:
        let obj = { foo: 123, age: 18 };  
    　　console.log(Object.getOwnPropertyDescriptors(obj);
        输出结果: 
            {
                foo: {
            　　value: 123, 
            　　writable: true, 
            　　enumerable: true, 
            　　configurable: true 
            　　 }
                age: {
            　　value: 18, 
            　　writable: true, 
            　　enumerable: true, 
            　　configurable: true 
            　　 }
            }




