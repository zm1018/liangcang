下载git,安装git
再配置git bash的打开路径直接是本地的虚拟仓库:
    右键点击git bash -- 属性 -- 起始位置写成本地仓库的路径 -- 应用 -- 确定;

配置git本地仓库：
	1.建一个本地虚拟仓库,先在某盘建个文件夹 -- 再打开bash终端 -- cd进入到某盘文件夹位置 -- 输入git init 回车 -- 虚拟仓库建好了,
        这个git init作用是:将git在本地进行初始化,创建出一个虚拟仓库,
        本地虚拟仓库的作用是:用来暂存要上传到远程仓库的所有文件;
        这时可以去电脑的本地仓所在文件夹查看已经有一个.git文件夹了（是隐藏文件夹,存的是当前项目的所有版本信息）

    2.在本地仓库里建一个README.md文件,这个文件里写当前项目的说明,也就相当于买东西附赠的说明书;
    3.git设置忽略文件和目录
        1.登录gitbash命令端进入本地git库目录
        2.用vim .gitignore创建 .gitignore文件,
        3.文件里写正则表达式,来设置要忽略哪些文件或文件夹不上传到git远程仓库,例如:
            *.[oa]  是忽略*.o和*.a文件
            *.[bB]
            !my.b  是忽略*.b和*.B文件，my.b除外
            dbg 是忽略dbg文件和dbg目录
            dbg/ 是只忽略dbg目录，不忽略dbg文件
            dbg
            !dbg/ 是只忽略dbg文件，不忽略dbg目录
            /dbg  是只忽略当前目录下的dbg文件和目录，子目录的dbg不在忽略范围内
            #  是给文件里写注释
        添加忽略之后，已经提交到版本库中的文件是无法忽略的。只能clone到本地，删除后，再进行忽略。
        .gitignore文件只能忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。


本地磁盘提交文件到本地仓库暂存区： 
    git status，查看工作区(本地磁盘上)当前的文件状态和上次提交到暂存区的有没有改变,有会把这些文件名显示出来;
    git diff 查看文件到底改变了哪些内容;
    git add提交命令,4种:
        1.将一个xx文件添加到暂存区:  
            git add 文件夹名  
        2.将所有文件添加到暂存区:
            git add -A. 
            或者 git add *  
        3.将添加的新文件和编辑过的文件不包括删除的文件添加到暂存区:
            git add . 
        4.将编辑或者删除的文件，不包括新添加的文件存到暂存区:
            git add -u 

    设置每次提交的备注信息,也就是自己写的提交记录
        git commit -m "这一次的提交描述"

    将文件改变的地方复原,撤销更改,也就是将没改变的文件从暂存区恢复到工作区覆盖改变的文件:
        git checkout 文件名


clear 清屏,清除控制台内容,免得看的眼花缭乱;

如果不小心把本地磁盘上的文件删掉了,可以去暂存区查看提交历史来恢复文件:
    git log 查看提交历史;这个命令不会自动退出,要输入 q 才退出;
    恢复文件到指定的某一次提交找回误删的文件: git reset --hard 要恢复到的某一次提交历史的版本号也就是git log查出来的commit后面那一串内容  敲回车   


把初始化好的本地仓库和远程仓库进行连接配置:
    1.先去GitHub建个远程仓库,点击GitHub右上角+号 --- 点击New repository -- 输入仓库名 -- 点击public -- 点击create repository创建,就完成了;
	2.在git bash里面进行用户名和邮箱设置:
        设置用户名:
            git config --global user.name "随便取一个用户名" (回车)
		设置邮箱:
            git config --global user.email "输入你自己的邮箱" (回车)
		表示你这台电脑上所有的Git仓库都会使用这个配置;

	3.输入git config --list查看当前git bash的设置,可以看到刚才设置的用户名邮箱等信息

	4.生成一个新的SSH密钥:
		在git bash里输入ssh-keygen -t rsa -C "自己的github邮箱" 敲回车
		就会生成一个.ssh文件夹,旁边提示 .ssh的文件夹路径,按照路径找到.ssh文件夹，找到.pub后缀的文件，打开过后把内容全部复制,
        去GitHub里点击settings -- 点击SSH and GPG keys -- 点击new SSH key 将复制的秘钥内容粘贴到key的框里,title框是给秘钥取名字的,可以自己随便取 -- 点击add SSH key 添加成功就能看到刚才自己添加的秘钥了;
        
        一般.ssh文件夹在c盘 -- users -- Administrator文件夹里;

		生成秘钥时如果已经生成过的可以重置shh秘钥,按他的提示输入y就行了;
            
	5.在git bash里输入添加远程仓库连接命令：
        git config remote.origin.url "https://...自己的仓库ssh地址.git"
		老版本的命令是: git remote add origin 自己的远程仓库地址
            远程仓库的地址在code按钮那里,点击就能弹出来;

	6.提交本地仓库内容到远程仓库,3种：
		git bash终端输入git push -u origin master
        普通推送: git push
        强行推送: git push -u origin master -f


和别人一起开发,拿到别人git远程仓库的地址,从远程仓库下载他写的项目文件到本地,输入命令:
git clone 远程仓库的地址 回车

因为协同开发每个人的进度不一样,需要将别人远程仓库更新的代码也同步下载到本地,输入命令:
git pull 


让git bash能在vscode控制台使用：
    1.在vscode设置里指定git的安装目录

    2.右键vscode的快捷方式——点击属性——点击兼容性——点击以管理员身份运行——应用——确定，是为了让vscode的终端能输入，否则输什么进去都没用。

    3.去vscode里点击设置，搜索shell——找到Terminal>Integrated>shell:Windows——点击settings.json中编辑——把路径改成自己安装的bash.exe所在的文件夹路径就行（路径要用/斜杆隔开）,
    配置git的安装路径: "git.enabled": true,
    "git.path": 自己安装的git.exe所在文件夹路径,

    4.切换终端：
        现在ctrl+~ 调出终端, 终端就是bash终端了，想切换成黑窗口输入：输出cmd就行了，切换回来输入：bash就行了


显示隐藏文件夹：
    点击计算机——组织——文件夹和搜索选项——查看——显示隐藏的文件夹和驱动——应用——确定