// 定义变量，要遵循变量命名规范，对大小写敏感。
@color: rgb(83, 187, 52);
@font14: 14px;
.div1 {
    /* 调用变量 */
    color: @color;
    font-size: @font14;
}

@number:10px;
//后代选择器，嵌套写法，子元素要写在父元素里
nav {
    color: red;
    p {
        width: @number;
        /* 作用域，代码执行顺序是遵循就近原则，两个相同的变量，值不同，哪个离调用它的元素近哪个生效，另一个被层叠。*/
        @number:30px;
        height: @number;
        /* 设置运算符不转义 */ 
        padding: ~"10px / 1.5";
        /* 字体大小和行高的css写法就是这样，所以这里不转义，默认编译成css写法 */
        font: 10px / 1.5;

    }
}
// 伪元素或伪类或交集选择器写法，前面要加&符号，才会连在一起，否则默认成后代选择器元素和元素之间会有空格。
@key:margin;
@i:2;
/* 调用插值 */
.div@{i} {
    color: @color;
    // 变量可以设置成属性，调用插值，直接给属性赋值，这里编译后是margin：auto;。
    @{key}: auto;
    &:hover {
        color: gold;
    }
}
// less加+ 减— 乘* 除/ 运算，运算符左右一定要有空格，混合运算用（）表示优先级，只有一个单位默认取那个单位，如果两个都有单位，默认取前面的元素的单位。
@border: 10px;
.div3 {
    // 只有一个单位，运算后结果，默认为这个单位
    width: 5rem + 5;
    height: 100 - 95rem;
    // 数字表示的颜色也可以运算
    color:#666 - #222;
    // 混合运算,()括起来的优先运算
    border: solid (1px + 9) * 2 ;
    padding: (10px + 2) * 2;
    padding: (10px + 2) / 2;
    padding: 10px + 2 / 2;
    padding: 10px / 2 - 2;
    // 变量运算，两个不同的单位，取前面元素的单位
    border: @border / 2rem;
    // border写了3个样式，默认执行最后一个样式，并且第一个样式里没有重复的solid也会被覆盖掉，因为边框属性要两个属性值才能生效，所以要在最后一个样式里也写上solid。
    border: (20rem - @font14) / @border solid;

}
// 函数
div {
    /* 调用内置的函数，这个是四舍五入 */ 
    width: round(3.4px);
    width: round(3.5px);
    /* 这是转换百分比的函数  */
    height: percentage(0.2);
    /* 没有生成随机数的函数 */
    //  padding: random();
    /* 开平方 */
    padding: sqrt(25%);
}
/* 混入，不同选择器的样式可以互相调用，还可以传参，设置混入，如下：*/
// 选择器后面不加括号，这个选择器也会编译到同名css文件里显示，
.show {
    display: inline;
    
}
// 加括号就不会在同名css文件里显示，调用它的时候可以加括号也可以不加括号。
.hide(){
    display: none;
}

// 接收小括号的参数的选择器需要定义个变量名，再调用这个变量名，下面小括号里参数是blue蓝色，这里调用就能得到blue值,有（）所以自己不显示到同名css文件里，会把样式传给调用它的选择器。
.box(@color) {
    padding: 5px;
    color: @color;
}
// 调用混入
div {
    width: 100px;
    /*调用混入，调用这个选择器名字，会把它的css样式传过来*/ 
    .show;
    /* 调用时不加括号，也能正常传递 */
    .hide;
    /* 调用时加括号，能正常传递 */
    .hide();
    // 小括号里还可以传参数，接收的选择器后面也要写括号，并定义变量名。
    .box(blue);
}
/* 命名空间,不会编译到css文件里显示，sess没有这个功能*/
#nm() {
    .show {
        display: grid;
    }
}
/*调用命名空间,调用的样式相同，应该用并集选择器，但这里自动生成的是各自单独的选择器，没有继承智能*/
div {
    #nm.show;
}
span {
    #nm.show
}
/* 设置继承*/ 
.line {
    display: inline;
}
/* 继承样式,一定要带;不然报错*/
div {
    &:extend(.line);
}
span {
    &:extend(.line);
}
/* 属性合并 */ 
div {
    // 属性后面写+会生成用 ，隔开的复合写法css样式
    background+: url(a.png);
    background+: url(b.png);
    // 属性后面写 +_ 会生成空格隔开的复合写法
    transform+_: scale(2);
    transform+_: translate(20px);
}
/* 媒体查询，通过不同宽度时设置根元素字体大小来改变使用rem单位的所有元素的大小*/
@media screen and (min-width:320px) {
    html {
        font-size: 20px;
    }
}
@media screen and (min-width:690px) {
    html {
        font-size: 40px;
    }
}
@media screen and (min-width:980px) {
    html {
        font-size: 50px;
    }
}
.containter {
    width: 750px;
    @media screen and (min-width:320px){
        width: 320px;
    }
    @media screen and (min-width:690px){
        width: 680px;
    }
}
/* 判断 */ 
// 先定义个变量
@count : 3;
// 再写个方法 .方法名() ,方法里传的参数是变量，再写when（）判断，括号里写判断条件，
// 如果变量的值>4，执行这行代码，返回运算结果给调用方；

.a(@cn) when ( @cn > 4 ){
    width: 100px + @cn;
}
// 如果变量的值<4，执行这行代码，返回运算结果给调用方。
.a(@cn) when (@cn < 4 ){
    width: 10px *2 - @cn;
}
div {
    // 返回判断后的结果给调用方
    .a(@count);
}
/* 循环，递归实现的 */
// 定义个变量,存初始值的
@count2: 0;
// 定义个方法，方法里的参数是计数器变量，根据when里的判断条件，从0开始循环，第一次：计数器0<3,满足循环条件，执行里面控制的代码，第一行代码是递归函数，方法调用方法自己，并给参数计数器+1，第二行代码选择器 -（这个-是拼接）@{计数器的值}，让每次循环后的选择器也变了，选择器里的样式的值调用计数器，让每次样式的值也变了，
// 继续循环第二次，第二次：计数器因为0+1变成1，满足条件继续循环，直到循环第4次，计数器值是3，3不小于3，判断条件不满足，结束循环。
.get2(@i) when (@i < 3){
    .get2((@i + 1));
    .div-@{i} {
        width: 100px + @i;
    }
}
// 第一次循环变量的初始值是0，每循环一次初始变量的值都+1，第一次循环结束，变量的初始值变成了1，代码从上到下执行，计数器就从1开始计数。直到循环到第4次，变量的初始值变成了3，传给计数器，计数器存的值3和判断条件3相等，不满足小于3，停止递归循环。
.get2(@count2);