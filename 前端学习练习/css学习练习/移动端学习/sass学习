常见的css预处理器：Sass、Less、Stylus。 
sass和less一样，是预处理语言。
官网：https://sass-lang.com/

去vscode安装Easy sass插件，可以同步将.sass文件编译成同名的css文件

sass使用：
    1.建一个后缀名为.sass（老版本）或.scss（新版本，现在都用这种后缀名）的文件，在文件里写sass语句。
    
    2.sass的注释:
        //单行注释，不会被编译，不会出现在同名的css文件里
        /*  */多行注释，就是css的注释，会被编译，会出现在css文件里,并且在顶端自动生成@charset "UTF-8";的编码.
    3.定义变量：$变量名（遵循命名规范）。
        普通变量声明在全局时,默认是全局变量,但如果在{}里对这个变量重新赋值,{}里面的虽然同名,但已经是局部变量了,它和全局变量不是同一个变量,只是名字相同; 如果想让它替代之前的全局变量,需要在值后面加!global;

        普通变量:
            $变量名: 值;     //这种变量至上而下执行,后面的值会覆盖前面的值
        默认变量:
            $变量名: 值 !default;  //这种有默认值的,新值会覆盖默认值,不管新值在上还是下面
        强制声明全局变量:
            $变量名: 值 !global;

    4.定义插值：${变量名}:值;
        插值可以直接给标签或css属性的局部使用，像js的ECMA6的${}功能,可以进行字符串拼接,例如：
            $key:margin;
            $i:2;
        调用插值，编译后是div2
            .div#{$i}
        变量可以设置成属性，调用插值，直接给属性赋值，这里编译后是margin：auto;。
            #{$key}: auto; 

    5.作用域：从上往下执行代码。
    定义相同的变量名，不同的变量值，一个写在外面，一个写在选择器里面，里面的变量只会对{}里面它下面的代码调用生效。

    6.选择器嵌套：
        子元素写在父元素里面。
        例如：
        ul {
            outline: none;
            li {
                width: 20px;
                div {
                    height: 30px;
                }
                p {
                    text-align: center;
                }
            }
        }
    7.伪类或伪元素要在前面加&符号，&符号是父级元素选择器,写法例如：
        a {
            &:hover {
                代码..;
            }
        }

    8.属性嵌套：
        div {
            属性后面一定要写：否则会编译成后代选择器。
            font: {
                size: 16px;
                weight: bold;
                family: 宋体;
            }
        }

    9.sass运算，任何数字、颜色、或变量都可以参与运算。4种运算符：加+ 减- 乘* 除/，除法的/默认识别成分隔符，不进行运算，如果要进行除法运算，需要用（）括起来，两个不同的单位不能进行运算，会报错，这两点不如less智能。 
        运算符前后用空格隔开，       
        用小括号表示运算优先级，
        多个运算时除法不用括号括起来也能运算。
        元素运算时，只有一个单位，运算结果取那个单位，       
        设置代码不编译直接输出成css内容：
            ~"值 运算符 值"
            例如：
             padding: ~"10px / 1.5";
        字体大小和行高的css写法就是这样，所以这里不进行运算，默认编译成css写法。
            font: 10px / 1.5;

    10.sass的内置函数，具体有哪些要去官网或百度一下，使用方法：直接在属性后面调用。
    例如： 
        这个是四舍五入 
        width: round(3.4px);  
        这是转换百分比的函数
        height: percentage(0.2);

    11.sass自定义函数,语法：
        @function sum($n,$m) {
            @return $n + $m;
        }
    调用自定义函数：
        div {
            调用自定义函数，定义多少参数，就要传多少参数， 参数用，隔开。
            font-size: sum(4px, 5px);
        }

    12.sass混入(也叫混合)：
        作用:直接声明一段代码块,可以在很多地方调用,它不是函数;

        定义混入：
            @mixin 混入的名字 {
                代码;
            }
        调用混入：
            @include 混入的名字 {
                代码;
            }
        
        选择器通过调用混入的名字，把混入里写的样式传递给调用的选择器.

        混入是隐藏不编译的，不显示到同名的css文件里,只会将它里面写的样式编译到调用它的选择器里。
        
        可以写带参数的混入,参数可以只设置形参,调用的时候传实参,也可以设置默认值:
        例如：
        
        @mixin box($color) {
            color: $color;
        }
        这里编译后的css文件会得到color:blue;的样式。
        div {        
            @include box(blue);
        }

    sass继承
        继承会把{}里的所有代码都继承,包括里面的子选择器和子选择器的css样式;      
        设置继承，可以给前面的.换成%表示占位，调用时也用%，这样.line这个选择器就不会显示到css文件里，只会显示调用继承的选择器.

        设置继承语法：
        .选择器名字 {
            样式
        }
        继承样式语法：
        .选择器名 {
            @extend %选择器名字;
        }
        
        百分号占位，让设置继承语法不显示：
        %选择器名字 {
            样式
        }
        继承样式语法：
        .选择器名 {
            @extend %选择器名字;
        }
    sass属性合并：
        设置属性合并，要先定义变量，在变量里用小括号括起来写键值对，例如：
        $background: ( 
            a: url(a.png),
            b: url(b.png)
            );
        $transform: ( 
            a: scale(2), 
            b: rotate(30deg)
            );
        调用属性合并
        div {
            这种生成用，隔开的合并属性
            background: map-values($background);
            这种生成用空格隔开的合并属性，后面的...不能省略
            transform: zip(map-values($transform)...);
        }
    sass媒体查询写法：
        选择器 {
            标准样式
            @media screen and (媒体特性){ 样式 }
        }
    sass判断：
        1.定义个变量
            $变量名：值;
        2.调用方里写判断条件：
            调用方选择器 { 
                @if(判断条件) {
                    返回值或运算公式，满足条件执行if控制的代码，并返回结果给调用方
                }
                @else {
                    不满足上面的判断条件执行else控制的代码，并返回结果给调用方
                }
            }
        例如：
        $count: 3;
        div {
            判断条件是否满足，如果满足返回这行代码的运算结果，如果不满足继续向下执行代码
            @if($count > 4) {
                width: 100px + $count;
            }
            @else {
                width: 10px * 2 - $count;
            }
        }
    sass的循环：
    有for、while等循环方式。
        for循环，$变量名 是计数器，from是从...开始，through是到..之间结束（包含结束值）后面跟{循环的代码体}
        例如：
            @for $i from 0 through 2 {
                选择器和循环的值 拼接 要用 -# 连接，后面跟的是{每次循环后的计数器值作为参数}
                div-#{$i} {
                    width: 100px + $i;
                }
            }
    sass导入：
        一个sass文件可以导入到另一个sass文件里，语法：
        @import "要导入的sass文件路径";
 