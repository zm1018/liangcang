// sass代码的执行顺序是从上到下。
// 定义变量
$num: 75px;
// 定义插值
$key:margin;
$i:3;
div#{$i} {
    /* 调用变量 */
    width: $num;
    /* 调用插值 */
    #{$key}: auto;
    /* 作用域，两个相同的变量，值不同，每个变量都只会对它下面的代码生效，直到遇到下个相同的变量开始，被层叠 */
    // 这个num变量是局部变量,只在当前{}里它下面的有效,如果想让它的值替换上面那个全局变量的75px值,需要在后面写!global
    // $num: 100px !global;
    $num: 100px;
    height: $num;
}


/*选择器嵌套：*/

ul {
    outline: none;
    li {
        width: 20px;
        .div1 {
            height: 30px;
        }
        #p {
            text-align: center;
            // 伪类或伪元素的写法,&符号是父级元素选择器
            &:hover {
                background-color: pink;
            }
        }
    }
}

// 属性嵌套,属性后面一定要有冒号，不然就识别成后代子元素了：
div {
    /* 属性嵌套 */
    font: {
        size: 16px;
        weight: bold;
        family: 宋体;
    }
}


/* 运算 */

div {
    // 只有一个单位，运算结果默认为此单位
    width: $num + 20;
    // 不同的单位不能运算，会报错
    // height: 100px - 1rem;
    height: 10rem - 1rem;
    color: #012345 * 2;
    // 默认除号为分隔符，不运算，直接输出成css代码
    padding: 10px / 5;
    // 除法运算需要用括号括起来
    padding: (10px / 5);
    // 运算优先级
    padding: (10px + 2) * 2;
    padding: (10px + 2) / 2;
    padding: 10px + 2 / 2;
    padding: 10px / 2 - 2;
}

// 函数

/* 调用内置的函数，这个是四舍五入 */

div {
    width: round(3.4px);
    width: round(3.5px);
    // 这是转换百分比的函数
    height: percentage(0.2);
    // 生成随机数,值是0-1之间的小数
    padding: random();
    // 开平方，sass没有这个函数
    // padding: sqrt(25%);
}

// 自定义函数
@function sum($n, $m) {
    @return $n+$m;
}

div {
    // 调用自定义函数，定义多少参数，就要传多少参数， 参数用，隔开。
    font-size: sum(4px, 5px);
}

// 混入

/* 混入，混入里写的样式可以供多个选择器调用，还可以传参，但这不是函数,只是一段代码块, 设置混入，如下：*/

// 不带参数的写法,2种:
@mixin show {
    display: inline;
}

@mixin hide() {
    display: none;
}

// 带参数的混入,可以()里定义变量名作为形参,调用时传参,也可以赋默认值,此混入不会显示到同名css文件里，会把样式传给调用它的选择器。
// 设置形参,调用的时候传实参的写法:
@mixin box($color) {
    padding: 5px;
    color: $color;
}


/* 调用混入 */

div {
    width: 100px;
    //调用混入，调用这个混入的名字，会把它的css样式传过来
    @include show;
    // 带参数的混入 调用时小括号里传实参
    @include box(blue);
}

// 定义参数设置默认值的混入,写法:
@mixin xxx($padding:30px, $border: 1px solid #000) {
    border-right: $border;
    border-top: $border;
    padding-left: $padding;
}

// 调用混入
span {
    // 全部使用参数默认值的,直接调用混入名字就行
    @include xxx;
    .span1 {
        // 传入一个参数的新值,修改默认值,这里修改的是第一个参数的值,第二个参数还是默认值,不会变
        @include xxx(50px);
    }
    .span2 {
        // 只修改后面的某个参数,需要将参数名也写上,否则会按传参顺序从第一个参数开始传入
        @include xxx($border: 3px solid red);
    }
    .span3 {
        // 这是修改全部参数,按顺序传入就行,参数之间用,分隔
        @include xxx(10px, 6px dashed pink)
    }
}


/* 继承 */

// 继承不光继承css样式,还继承写在里面的子元素和子元素的css样式,这种写法会显示继承自谁
.line {
    display: inline;
    // 所有要继承 .line这个类选择器的,它里面的a标签和a标签里的css样式也会被继承
    a {
        color: #000;
    }
}


/* 继承样式,一定要带;不然报错*/

div {
    @extend .line;
}

span {
    @extend .line;
}


/* 设置继承，可以给前面的.换成%表示占位，调用时也用%，这样.line这个选择器就不会显示到css文件里，只会显示调用继承的选择器*/

%line {
    display: inline;
}

// 继承样式,一定要带;不然报错
div {
    @extend %line;
}

span {
    @extend %line;
}

// 属性合并

/* 设置属性合并，也就是样式简写,要先定义变量，在变量里用小括号括起来写键值对 ,比如border属性或font属性,单独一个个写的合并成一行,共用一个键*/

$background: ( a: url(a.png), color:pink);
$transform: ( a: scale(2), b: rotate(30deg));
// 调用属性合并
div {
    // 这种生成用,隔开的合并属性
    background: map-values($background);
    // 这种生成用空格隔开的合并属性，后面的...不能省略
    transform: zip(map-values($transform)...);
}

// 媒体查询
.containter {
    width: 750px;
    @media screen and (min-width: 320px) {
        width: 320px;
    }
    @media screen and (min-width:690px) {
        width: 680px;
    }
}


/* 判断 */

// 先定义个变量
$count: 3;
div {
    // 判断条件是否满足，如果满足返回这行代码的运算结果，如果不满足继续向下执行代码
    @if($count > 4) {
        width: 100px + $count;
    }
    // 如果不满足上面的条件，执行这行代码并返回运算结果。
    @else {
        width: 10px * 2 - $count;
    }
}


/* 循环 */

// for循环，$i是计数器，from是从...开始，through是到..之间结束（包含结束值），{循环的代码体}
@for $i from 0 through 2 {
    // 拼接要用-#{每次循环后的计数器值作为参数}
    div-#{$i} {
        width: 100px + $i;
    }
}


/* 导入另一个sass文件 */

@import "wo.scss";