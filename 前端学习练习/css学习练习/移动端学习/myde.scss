// sass代码的执行顺序是从上到下。

/*! 定义变量 */

$num: 75px;
// 定义插值
$key:margin;
$i:3;
div#{$i} {
    /* 调用变量 */
    width: $num;
    /* 调用插值 */
    #{$key}: auto;
    /* 作用域，两个相同的变量，值不同，每个变量都只会对它下面的代码生效，直到遇到下个相同的变量开始，被层叠 */
    // 这个num变量是局部变量,只在当前{}里它下面的有效,如果想让它的值替换上面那个全局变量的75px值,需要在后面写!global
    // $num: 100px !global;
    $num: 100px;
    height: $num;
}


/*选择器嵌套：*/

ul {
    outline: none;
    li {
        width: 20px;
        .div1 {
            height: 30px;
        }
        #p {
            text-align: center;
            // 伪类或伪元素的写法,&符号是父级元素选择器
            &:hover {
                // rgb颜色编译的时候会自动转换成 #进制颜色
                background-color: rgb(245, 245, 213);
                // rgba颜色编译时不会被转换
                color: rgba(0, 0, 255, .5);
            }
        }
    }
}

// 属性嵌套,属性后面一定要有冒号，不然就识别成后代子元素了：
div {
    /* 属性嵌套 */
    font: {
        size: 16px;
        weight: bold;
        family: 宋体;
    }
}


/* 运算 */

div {
    // 只有一个单位，运算结果默认为此单位
    width: $num + 20;
    // 不同的单位不能运算，会报错
    // height: 100px - 1rem;
    height: 10rem - 1rem;
    color: #012345 * 2;
    // 默认除号为分隔符，不运算，直接输出成css代码
    padding: 10px / 5;
    // 除法运算需要用括号括起来
    padding: (10px / 5);
    // 运算优先级
    padding: (10px + 2) * 2;
    padding: (10px + 2) / 2;
    padding: 10px + 2 / 2;
    padding: 10px / 2 - 2;
    width: 100% - 50%;
}

// 函数

/* 调用内置的函数，这个是四舍五入 */

div {
    width: round(3.4px);
    width: round(3.5px);
    // 这是转换百分比的函数
    height: percentage(0.2);
    // 生成随机数,值是0-1之间的小数
    padding: random();
    // 开平方，sass没有这个函数
    // padding: sqrt(25%);
}


/* 自定义函数 */

@function sum($n, $m) {
    @return $n+$m;
}

// 声明一个映射
$colors: (light: white, dark:black);
// 声明一个函数,设置个形参 key
@function color($key) {
    // if not是判断如果不是 要执行的代码, map-has-key()是查看key是否在map里,在返回true,否则返回false,
    // 写这个判断是因为,如果map里没有这个key,也不会报错,也不编译到css文件,所以看不到反馈,不能有效的调试代码,找出问题,所以要自己设置报错
    @if not map-has-key($colors, $key) {
        // 这里可以设置一个警告,如果没有这个键,就在黑窗口输出警告信息,提示我哪里有问题,程序不会中断,这是在黑窗口运行监听sass时才能看到,我是直接在vscode里运行的,看不到警告信息,
        // @warn "我是警告,这里没有你传的这个键名";
        // 设置报错,如果没有这个键会直接报错,程序中断,报错信息在vscode的控制台输出
        @error "我是报错,这里没有你传的这个键名";
    }
    // map-get()通过键获取值,返回要获取的键的值,如果键不存在,返回null
    @return map-get($colors, $key);
}

div {
    // 调用自定义函数sum，定义多少参数，就要传多少参数， 参数用，隔开。
    font-size: sum(4px, 5px);
    // 调用color函数,传入上面声明的映射中的某个键,将值返回赋值给背景色,如果传入的键映射里没有,就会输出自定义的报错信息
    background-color: color(dark);
}

// 混入

/* 混入，混入里写的样式可以供多个选择器调用，还可以传参，但这不是函数,只是一段代码块, 设置混入，如下：*/

// 不带参数的写法,2种:
@mixin show {
    display: inline;
}

@mixin hide() {
    display: none;
}

// 带参数的混入,可以()里定义变量名作为形参,调用时传参,也可以赋默认值,此混入不会显示到同名css文件里，会把样式传给调用它的选择器。
// 设置形参,调用的时候传实参的写法:
@mixin box($color) {
    padding: 5px;
    color: $color;
}


/* 调用混入 */

div {
    width: 100px;
    //调用混入，调用这个混入的名字，会把它的css样式传过来
    @include show;
    // 带参数的混入 调用时小括号里传实参
    @include box(blue);
}

// 定义参数设置默认值的混入,写法:
@mixin xxx($padding:30px, $border: 1px solid #000) {
    border-right: $border;
    border-top: $border;
    padding-left: $padding;
}

// 调用混入
span {
    // 全部使用参数默认值的,直接调用混入名字就行
    @include xxx;
    .span1 {
        // 传入一个参数的新值,修改默认值,这里修改的是第一个参数的值,第二个参数还是默认值,不会变
        @include xxx(50px);
    }
    .span2 {
        // 只修改后面的某个参数,需要将参数名也写上,否则会按传参顺序从第一个参数开始传入
        @include xxx($border: 3px solid red);
    }
    .span3 {
        // 这是修改全部参数,按顺序传入就行,参数之间用,分隔
        @include xxx(10px, 6px dashed pink)
    }
}


/* 继承 */

// 继承不光继承css样式,还继承写在里面的子元素和子元素的css样式,这种写法会显示继承自谁
.line {
    display: inline;
    // 所有要继承 .line这个类选择器的,它里面的a标签和a标签里的css样式也会被继承
    a {
        color: #000;
    }
}


/* 继承样式,一定要带;不然报错*/

div {
    @extend .line;
}

span {
    @extend .line;
}


/* 设置继承，可以给前面的.换成%表示占位，调用时也用%，这样.line这个选择器就不会显示到css文件里，只会显示调用继承的选择器*/

%line {
    display: inline;
}

// 继承样式,一定要带;不然报错
div {
    @extend %line;
}

span {
    @extend %line;
}

// 属性合并

/* 设置属性合并，也就是样式简写,要先定义变量，在变量里用小括号括起来写键值对 ,比如border属性或font属性,单独一个个写的合并成一行,共用一个键*/

$background: ( a: url(a.png), color:pink);
$transform: ( a: scale(2), b: rotate(30deg));
// 调用属性合并
div {
    // 这种生成用,隔开的合并属性
    background: map-values($background);
    // 这种生成用空格隔开的合并属性，后面的...不能省略
    transform: zip(map-values($transform)...);
}

// 媒体查询
.container {
    width: 750px;
    @media screen and (min-width: 320px) {
        width: 320px;
    }
    @media screen and (min-width:690px) {
        width: 680px;
    }
}


/* 判断,2种写法 */

// 先定义个变量
$count: 3;
div {
    // 带括号的写法,括号里的判断条件是否满足，如果满足返回这行代码的运算结果，如果不满足继续向下执行代码
    @if($count > 4) {
        width: 100px + $count;
    }
    // 如果不满足上面的条件，执行这行代码并返回运算结果。
    @else {
        width: 10px * 2 - $count;
    }
}

$theme: dark;
body {
    // 不带括号直接写表达式的写法
    @if $theme==dark {
        background-color: #000;
    }
    @else if $theme==hight {
        background-color: #fff;
    }
    @else {
        background-color: #ccc;
    }
}


/* 循环 */

// for循环2种，$i是计数器，from是从...开始，through是到..之间结束（包含结束值），{循环的代码体}
@for $i from 1 through 2 {
    // 拼接要用-#{每次循环后的计数器值作为参数}
    div-#{$i} {
        width: 100px + $i;
    }
}

// 第二种for 变量 from ..to.., 不包含结束值
@for $i from 1 to 3 {
    a {
        font-size: $i * 1px;
    }
}

// each循环,遍历列表
$arr: 1 2 3 4 5;
@each $item in $arr {
    .div#{$item} {
        width: #{$item}px;
    }
}

// while循环,必需要在结束位置写循环停止条件,否则容易死循环
$n:3;
@while $n>0 {
    .div#{$n} {
        width: 1rem * $n;
    }
    // 循环停止条件
    $n: $n - 1;
}


/* 导入另一个sass文件 */

// 一般是将公共样式文件用 _文件名.scss命名,引入的时候直接写 @import "文件名"导入,不需要写_和后缀;
@import "wo.scss";