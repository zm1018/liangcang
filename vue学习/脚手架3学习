@vue/cli(脚手架)是一个命令行工具,能快速生成一个vue项目的基础结构,不用我们自己再去配置node环境和webpack打包工具和项目开发所需要的各种vue/css/loader系列的包等...

vue脚手架下载:
    npm install @vue/cli -g
    下载安装脚手架报错的时候,需要清空缓存处理 输入 npm cache verify后再重新下载安装;

用脚手架2创建项目:
    1.在安装了@vue/cli后再全局安装@vue/cli-init,安装后脚手架2和3都能用了:
        npm install @vue/cli-init -g
    2.输入 vue init webpack 项目名字 回车, 创建项目;
    3. 弹出? Project name,是要不要给项目取个名字,直接回车就行了;
    4. 弹出 ? Project description是项目描述,可以写也可以直接回车;
    5.弹出? Author (zm <735583465@qq.com>)是指定个作者,它默认读取git的全局配置里的,如果不改就直接回车;
    6.弹出? Vue build是选择构建模式,选 Runtime-only,就是不支持template模板,直接用render()渲染dom元素的那种模式,运行效率高,打包后的文件更小,
    7.弹出? Install vue-router是否安装路由,输入 y 回车, 一般都安装的;
    8.弹出? Use ESLint to lint your code? (Y/n) 是否安装代码书写格式规范,安不安装都行;
    9.弹出 Pick an ESLint preset (Use arrow keys)选择ESLint的版本,选中Standard这个 回车;
    10.弹出 Set up unit tests (Y/n)是否安装单元测试,输入 n 回车, 不安装,大公司才写测试;
    11.弹出 ? Setup e2e tests with Nightwatch? (Y/n)是否安装e2e包, 输入 n 回车,不安装;
    12.弹出 Should we run `npm install` for you after the project has been created?用哪个工具下载上面选择安装的包, 选npm 回车,就开始创建项目和下载项目需要的包了;
    13. 项目创建完成后,输入cd 进入项目文件夹 , npm run dev 运行项目;


用脚手架3创建vue项目,在要创建项目的文件夹位置打开终端,就会创建到当前文件夹里,2种方式:
    1.终端命令行:
        1. 输入 vue create 项目名 回车 (项目名不能有中文或特殊字符和符号,会生成一个项目文件夹,里面就是cli3自动创建的vue工程化框架)
        2.会弹出选择配置,按上下箭头选中 Manually select features(手动选择特性),可以自己选择项目里要用的哪些包或插件;
        3.会弹出要选择的插件和包的名字,按空格,当包名前面的()变成(*)就表示选中了,回车, 就会安装我选中的包,学习视频里选了babel和router这2个包;
        4.会弹出 Use history mode for router?是否安装历史模式的路由,输入n,因为常用的是hash模式路由;
        5.会弹出?Where do you prefer placing config for Babel, ESLint, etc.? (Use arrow keys)怎么创建我选中的这些包的配置文件,选中In dedicated config files单独创建每个包的配置文件;
        6.会弹出是否保存我选中的包,生成一个模板文件,以后要创建项目直接不用选,直接下载这些包,我选的是n,不保存模板, 回车,就会开始创建项目了;
        7.项目创建完成会弹出  cd my-vuecli01 是提示可以输入cd 项目名  进入到这个刚创建好的项目里, 再 npm run serve 运行这个项目看效果,等webpack编译完成,会弹出一个链接,打开链接,就能看到项目测试页面的效果了,再 npm run build 执行打包发布;

    2.可视化界面:
        1. 输入 vue ui 回车, 会自动打开浏览器弹出一个vue脚手架的可视化界面,在可视化界面里鼠标点点就能创建项目,比较好用;
        2.可视化界面里点击 创建 进入到给项目取名字的页面,
        3.点击最下面 +在此创建项目  按钮,进入到编辑要创建的项目路径和项目名字的页面:
            项目文件夹名这里输入要创建的项目名字,
            包管理器一般用npm,不选默认可选可不选,
            初始化一个本地git仓库是默认打开的,看一眼确定一下是打开的就行;
        4.点击 下一步 按钮 进入到选择一套预设页面,就是选择这个项目要用哪些包,还是选 手动 ;
        5. 点击 下一步 按钮 进入到要用的插件页面,用哪个选中哪个,就会安装了,我选的是babel和router和linter(es语法检查和格式化的插件,代码写的不规范就报错),拉到最底下有一个 使用配置文件 这一项一定要选中,就是单独生成这些包的配置文件,不然会把这些包的配置也写到package.json文件里,太乱 ;
        6. 点击 下一步 按钮 进入到要用的插件配置页面,router默认是hash模式不用管,linter选带standard这个单词的,表示默认规范,然后检查lint on save这个按钮是否打开,默认是打开的,点击 创建项目 按钮 进入到是否保存预设页面;
        7. 预设页面里要保存就输入个文件名字,就会把刚才选择安装的插件保存成一个模板,保存位置是 C:\Users\Administrator\.vuerc里,以后不用一个个选了, 不保存就直接点击 创建项目不保存预设 按钮 ,会弹出一个 正在创建项目, 等执行完,项目就创建成功了;
        8.创建完成后自动进入项目页面,叫项目仪表盘,左边菜单好多选项,插件/依赖/配置/任务,要运行项目点击 任务 -- 开发时选serve -- 运行 -- 显示编译成功后点击 启动app 就能查看项目测试页面的效果了, 打包发布时选build;
        9.原来已有的项目要用可视化界面,点击 导入 找到要导入的项目文件夹, 点击 导入这个文件夹按钮 就行了;
        
脚手架3创建的项目文件夹里的文件都是干什么的:
    1. .git文件夹,是把项目用git管理,方便提交到远程仓库;
    2. node_modules文件夹, 是node里npm安装运行要依赖的包;
    3. public文件夹,是放公用资源的,这个文件夹里的东西会原封不动的打包到dist文件夹里;
    4. src文件夹,是我们写代码的地方,我们要写的项目要用的所有文件都放在这个文件夹里;
            assets文件夹是放图片或css文件等资源的;
            components文件夹是放组件文件的;
            router文件夹是放路由文件的;
            views文件夹是放视图组件的;
            App.vue是项目中所有组件的根组件文件;
            main.js是入口文件;
    5. .browserslistrc文件,是适配浏览器相关的配置:
            > 1%   适配浏览器市场份额大于1%的,
            last 2 versions  只适配最后2个版本(比较新的版本,很老的版本不适配),
            not dead  废弃的版本就不适配了
    6. .gitignore文件,是配置git上传到远程仓库要忽略掉哪些文件或文件夹,里面是正则表达式,写在里面的都是不用上传的;
    7. babel.config.js文件,是babel包的配置文件,babel是给es6及以上的语法降级成es5的;
    8. package-lock.json文件,是个中间文件,package.json里显示的包有版本范围,这个文件里显示的包的版本都是这个项目真实安装的那些包的具体版本;
    9. package.json文件,是node的本地配置文件,管理node的nmp安装的那些包的:
        dependencies属性里写的是产品上线发布还要用的包,
        devDependencies属性里写的是项目开发时要用的那些包,
    10. README.md文件,是项目说明书文档;


脚手架项目里自定义配置,2种方式:
    1.通过修改packag.json文件,添加个vue属性,不推荐这种配置方式,建议单独写个文件放我们写的自定义配置:
        "vue": {
            "devServer": {
                "port": 这里可以自己指定个端口号,例如:8888,不配置都是默认8080,
                "open": true //值为true是执行项目完成后自动打开浏览器
            }
        }
    2.在项目的根目录下创建一个单独的vue.config.js文件(名字是固定的),来写我们自定义的配置:
        module.exports = {
            devServer: {
                port: 8888,
                open: true
            }
        }





    