vue是渐进式JavaScript框架,包括:
    声明式渲染 —— 组件系统 —— 客户端路由 —— 集中式状态管理 —— 项目构建；

用法:
    1.去官网下载vue.js文件
    2.在html页面script标签里引入vue.js文件
    3.HTML页面上写标签:
        <div id="app">vue实例的el属性绑定这个id名,实例里写的代码在这个标签内有效</div>
    4.创建一个vue对象: 
        var 变量名 = new Vue({  //vue对象的参数是一个对象{}
            //对象里的el键是元素的挂载(关联)位置,值传在html文件里要绑定的元素节点名或者元素节点上自定义的class属性名id名等
            el: '#app',  
            //vue实例对象也是个组件,是根组件,如果根组件里写template属性,template属性值会替换el属性绑定的那个元素节点,把模板里的标签渲染到页面,渲染在el绑定的元素节点的位置
            template:'<h1>这个标签会替换el属性绑定的id名是app的html文件里的div标签</h1>'
            data: {            //存数据的,要关联填充到页面标签里的那些数据都存在这个对象里
                键1: '数据值'
            }
        })
    5.将vue对象里的data数据模型里的存数据的键用{{}}插值填充到el键的值里,值是标签名或选择器名:
        例如:<div>{{键1}}</div>

vue程序执行过程:
    template模板写在vue实例里时,vue会先把模板保存到实例的options属性里,
    再解析成ast(abstract syntax tree抽象语法树的意思),
    再编译成render()函数,
    再通过render()函数创建虚拟dom(virtual dom),形成虚拟dom树,
        render()函数的作用是创建元素节点, 
        形参 h实际是一个被赋值的变量,接收的是创建元素节点的代码: h = this.createElement();
    再把虚拟dom树替换el属性绑定的那个标签,渲染成真实的dom元素,显示到页面;
     

模板语法:
    1.插值表达式{{}}
        用来将vue对象里的数据填充到html页面的标签间,不光可以传变量,还支持表达式计算,字符串拼接,但无法解析字符串里的标签,字符串里有标签的,需要用v-html指令解析;
        插值表达式有闪动问题,闪动就是网速不好时,加载页面,可能看到插值的{{}},因为它加载数据时,先将插值显示,再快速替换成插值里的键对应的数据值,网速不好时加载数据慢,就可能出现这种闪动问题,影响用户体验,用指令v-clock解决闪动问题;

    2.指令,vue内置13个指令,如下:
        指令的本质是我们平时写的自定义属性,但vue开发者怎么写自定义属性都行,现在我们是把他写的拿过来用,他写的指令都是以 v- 开头的,我们使用也是以 v- 调用;
    数据填充指令,4种:
        作用是进行数据绑定的,也就是将数据填充到标签中;
        v-cloak 解决插值闪动问题:
            解决原理是先通过样式隐藏内容,在内存中进行值的替换,替换好再显示到页面上;
            用法:
                在style标签里写:[v-cloak] {
                    display: none;
                }
                在html要使用插值的标签写v-cloak属性: <div v-cloak>{{键名}}</div>
        v-text 填充纯文本信息到html标签间:
            比插值表达式更简洁,直接在标签里写:<div v-text='键名'></div>
        v-html 填充html片段,也就是可以写html标签,会自动解析:
            这指令不能随便用,存在数据安全问题,网站内部数据(就是自己数据库里取出来的数据)可以使用,第三方的数据不能使用,否则会有xss跨站脚本攻击的风险,
            用法:
                vue对象的data属性里数据键存的数据是: 键:'<h1>数据</h1>' 这种带标签的,
                html页面里标签调用<div v-html='键名'></div>
        v-pre 填充原始信息,也就是不编译,标签里写什么就显示什么:
            <div v-pre>{{数据}}</div>   显示出来就是:{{数据}}

    数据响应式指令:
        数据响应式:
            数据更新时,填充到标签里的数据也同步更新,这需要vue一直监听属性,属性值是否发生变化,耗性能;
        v-once 只编译一次,数据显示到页面后不再具有响应式功能:
            常用在显示到页面上不需要修改的数据,设置v-once指令后,vue不再监听这条数据,少干点活提高性能效率;
             <div v-once>{{数据}}</div>

    双向数据绑定指令:
        v-model 主要用在表单input标签里,
        双向数据绑定:
            用户输入发生变化时,vue对象里data的某个键存的数据同步变化,并且此键在其它标签中填充的内容也会同步变化,
            从页面到脚本数据是个单向绑定,用的是事件监听实现,也就是监听属性value的值是否发生变化,监听用的是v-bind动态给属性赋值指令实现的;
            从脚本数据到页面填充内容是个单向绑定,用的是数据绑定实现,也就是绑定v-oninput事件="事件函数",触发事件函数,在函数里将事件对象的target.value值赋值给data某个存input框value值的键,合起来就是双向;
        在input标签里写: 
            <input type="text" v-model="键名">  //这里输入的内容变了
        在数据填充的标签里写:
            <div>{{键名}}</div>  //这里显示的内容也跟着变

    事件绑定指令,3种写法:
        1.v-on:事件名='代码或函数名'  
        2.@事件名='代码或函数名'
        3.@事件名='简单的取反或赋值的js代码'  //直接在事件上写代码,不符合前后端分离规则,少用;
        例如: 1.<button v-on:click='add'>调用add函数,不需要传参不加括号</button>
              2.<button @click='add(参数,$event)'>调用add函数,传1个参数</button>
              3.<button @click='num++'>把简单的js代码写在事件上,不需要定义函数</button>
    获得事件对象:
        1.如果只获取事件对象,不需要传其它参数,调用就直接绑定函数名,在声明函数时,只设置一个参数,这个参数默认就是事件对象,事件绑定时直接绑定函数名,在绑定时会默认携带事件对象这个实参,传给button按钮上事件绑定调用的函数的形参;
        2.如果有多个参数需要传,用这种,声明函数时,要将事件对象作为最后一个参数, 调用事件函数时,调用的函数()里最后一个参数,必需传$event作为实参, $event是事件对象实参的固定写法
            
    鼠标事件修饰符,写在事件的后面:
        .stop - 调用 event.stopPropagation()阻止冒泡:
            <button @click.stop='事件函数'>
        .prevent - 调用 event.preventDefault()阻止a标签默认跳转行为:
            <a href="#" @click.prevent="事件函数">
        .self - 事件冒泡时会判断事件源是否是自己,只有点击这个绑定事件函数的元素本身,才会触发事件调用函数。
            例如:
                多个li标签绑定了事件,只有一个写了阻止冒泡,那其它的li标签点击时仍会冒泡到ul标签,并触发ul标签上绑定的事件函数,一直冒泡到遇到window停止,如果不想冒泡,给每一个li标签都写阻止事件冒泡太麻烦了,
            解决办法:
                可以给ul标签加self修饰符,那它里面的任何li标签冒泡都无法触发ul上绑定的事件函数,只有ul标签自己才能触发;
        .once - 只触发一次事件函数,函数调用后解绑这个事件;
            使用场景例如:
                抽奖只有一次机会,抽完后就无法再抽了,也就是触发事件时只能调用一次事件函数,调用后once修饰符就把事件和这个事件函数解绑了。
        .capture - 添加事件侦听器时使用 capture(捕获的意思) 模式。
        .native - 监听组件根元素的原生事件。
        .left - (2.2.0) 只当点击鼠标左键时触发。
        .right - (2.2.0) 只当点击鼠标右键时触发。
        .middle - (2.2.0) 只当点击鼠标中键时触发。
        .passive - (2.3.0) 以 { passive: true } 模式添加侦听器
       
       可以写成串联写法,串联写法先写谁后写谁,执行时也有先后顺序,可以产生不同的效果:
        例如: 如果一个元素需要阻止事件冒泡和默认行为:
            <a href="#" @click.stop.prevent="事件函数">

    键盘事件的按键修饰符,主要作用是过指定用户哪个键才能触发绑定的事件函数:
        .enter 按回车键提交表单,
        .delete 按删除键一键清空input框里的内容
        .{keyCode | keyAlias} - 只当事件是从特定键触发时才触发回调。
    自定义按键修饰符:
        键盘事件后面也可以直接写 .要使用的按键对应的ASCII码值,来触发绑定的事件函数,例如:
        <input type="text" @keyup.65="事件函数名">  //a键ASCII码值是65,这里只有按a键才能触发绑定的事件函数;
        但数字没有语义化,所以用下面这行代码来自定义,相当于给ASCII码值取个别名,这个是全局对象:
            在vue对象外面写:Vue.config.keyCodes.自定义的按键名 = 要使用的按键对应的ASCII码值;
            调用在标签里事件后面写 .自定义的按键名 就行了;

    动态属性绑定指令:
        v-bind: 在属性前面调用,属性后面的值传一个变量,可以通过事件函数给变量从新赋值,动态更改属性的值,可以简写成:
            <a v-bind:href="url">点击跳转</a> //这个url是vue的data对象里存链接的键(变量)
            <a :href="url">点击跳转</a>  //简写,直接在属性前面写:效果一样

    样式绑定:
        class和style属性值是对象时,有缺陷,不能动态添加新属性,
        在控制台操作vue实例给对象添加新的键值时,虽然查看数据是添加成功,但不会动态更新到标签的class和style属性值里,原因是因为vue的更新原理,数据库里的数据都是通过get和set拦截好的,后期动态给对象新添加的属性不会被get和set拦截,用Vue.set()方法解决这个缺陷,通过Vue.set()添加的键就会被get和set拦截,被动态更新到标签的class和style属性值里;
            Vue.set(vue实例名.对象名,'键名','键的值') //写vue实例外面,和实例对象同级

        class属性的3种传参方式,作用都是用v-bind动态的控制给标签添加或删除类名:
            1.传三目运算符,适合2个类名选1个显示时用,isActive是写在vue实例data自定义的标志位变量,值true显示类名red的css样式,false显示类名blue的css样式:
                <div v-bind:class="isActive?'red':'blue'"></div>
            2.传对象,添加或删除样式也方便, 是通过属性值来控制样式的,键是类名,值是标志位变量,是vue对象data里的属性,负责返回true或false,来实现控制类名是否添加到标签里,类名上写的css样式是否显示,对象里可以传多个类名和值,用,隔开
                <div v-bind:class="{active:isActive}"></div>
            3.传数组,动态添加和删除样式很方便, 这种是直接操作类名实现样式控制的,在data里定义的属性名,值是标签的类名,在标签里写data里的属性名,用,隔开,来实现添加或清除某个类名控制的样式,清除就将属性名后面的类名设置成'',
                <div v-bind:class="[activeClass,errorClass]"></div>

            对象和数组可以结合使用: 
                <div v-bind:class="[activeClass,{active:isActive}]"></div>
            上面的对象和数组都是写在标签上的,行内的写法不符合前后端分离,简写成data属性里键的值传对象或数组:
                <div v-bind:class="objClasses"></div>
                <div v-bind:class="arrClasses"></div>
                vue对象的data里这样写:
                    data:{
                        objClasses:{
                            active:true,
                            error:true
                        },
                        arrClasses:['activeClass','errorClass'],
                    }
            默认的class属性值会保留,并且将值类名和v-bind动态控制的类名合并到一起,实现一个标签上多个类名;
                <div class="base" v-bind:class="objClasses"></div>
                已经有的类名和新动态添加的类名这里会解析成这样:
                    class="base active error" 3个类名

        style行内css样式表属性也是3种传参方式,作用是添加或删除或覆盖css样式:
            //值是三目运算符写法,color是css样式属性,isActive是标志位变量,变量值是true时,将'red'字符串赋值给color属性,值是false时,将'pink'颜色赋值给color属性, 因为v-bind绑定的属性是属于js的,不在是css的了,所以style的属性值要用字符串拼接的写法,比class里三目运算符的写法麻烦;
            <div v-bind:style="'color:' + (isActive?'red':'pink')"></div> 
            <div v-bind:style="objStyles"></div>  //传一个对象作为值
            <div v-bind:style="[objStyles,overrideStyles]"></div>  //传一个数组作为值,元素是data里定义的样式对象,每个对象都是一套css样式,如果样式重复,后面的覆盖前面的,不重复的会新增到css样式里,所以数组的传参方式可以添加多套css样式;
                vue对象的data里这样写:
                    data:{
                        objStyles:{ //style的值传对象,对象的值是键值对,纯css样式;
                            width:'100px',
                            height:'100px',
                        },
                        overrideStyles:{
                            width:'200px', //会覆盖上面100px的值
                            color:'red', //会新增到css样式里
                        },
                    }


    分支结构:
        用来动态添加或删除元素节点,控制元素是否渲染到页面,只有判断条件为true的那个标签才会渲染到页面:
            v-if='判断条件'  这都是写在标签里的,判断条件里要用的数据写在data里
            v-else-if
            v-else

        用来动态显示或隐藏元素节点,控制元素是否显示到页面,会渲染到页面,但是否显示要看变量的值,如果data里的标志位变量的值是false,不会显示这个元素,但在控制台可以看见,实现原理是将元素的css样式display设置成none,将元素隐藏了,如果data里属性值是true,display这个样式就被清除了,会将元素显示到页面:
            v-show='data里的某个标志位变量'
    
    循环结构:
        v-for循环,关键字有2种: in 或 of,效果一样,
        循环都可以和判断结合使用,都是写在标签里,判断可以控制遍历的哪条数据显示到页面;
        遍历数组:
            v-for='变量 in 数组'  //标签里写循环,遍历到的元素用插值表达式直接填充在标签里
            v-for='(变量,索引) in 数组'  //获取数组的每个元素,和每个元素的索引
            如果数组里是复杂的数据类型,例如数组里有对象,遍历到的变量存的元素是对象,通过变量.对象的键访问对象里的每条数据;
        遍历对象:
            v-for='值 in 对象' //写一个变量时,得到的都是对象里的键的value值,
            // 如果要获取对象里的键,in前面必需写2个变量,例如(value,key),这时这个key变量得到的就是键名,顺序是固定写法,
            v-for='(值,键) in 对象'
            // 如果还要获取索引,in前面用(value,key,index)3个变量,顺序和写法是固定的,
            v-for='(值,键,索引) in 对象'             
        循环时设置key值作用: 
            跟踪每个元素节点的身份,从而重用和重新排序现有的元素,
            也就是让vue在数据有变化,进行新老元素对比时,只对比key属性的属性值,能快速识别哪些key值和老元素的key值不一样,并在key值不一样的位置对元素节点进行增、删、改;
            循环时,建议都加上v-bind:key='每个元素的唯一标识,虽然可以是索引,但建议是数据库里每条数据的id',帮助vue区分不同的标签元素之间的区别,提高性能;
            加key属性的优点体现在往数据中间插入数据时:
                vue工作原理是将数据拦截之后创建新的虚拟元素节点和在页面上渲染好的老的元素节点对比,一个个标签对比后,把元素中填充的数据有变化的那条数据修改成新数据,再创建元素将虚拟dom将多出的数据填充到页面并渲染出来,这里修改和新建共操作了两次dom元素,性能慢,
                加key属性,key的值要求是唯一标识,这时vue对比时会对新数据和老数据的id值,对比完后,发现虚拟dom中数据1和2中间有一条数据3,老元素节点里没有这条数据3,就会在老数据1和2中间创建一个dom节点将这条没有的数据3填充渲染到页面,这里只新建,只操作了一次dom元素,效率比没有绑定key属性时高;
            
            

自定义指令,2种:
    全局指令,用Vue.directive()声明,第一个参数是指令名,第二个参数是一个对象:
        Vue.directive('自定义的指令名',{
            //inserted是固定写法,调用指令时没有参数,定义函数这里只写el,如果调用时传参,函数这el参数后面还要加个binding参数接收调用的是哪个指令,包括这个指令的所有信息,指令名/指令=后面的值等等...
            inserted: function(el,binding),{ 
                //函数体里写这个指令要实现的功能,比如自动获取input框的焦点,或改某个html元素的背景色
                //这是刷新页面自动获取input框的光标,和html里input标签的autofocus属性作用一样
                el.focus(); 

                //这是改变元素的背景色,el(element元素的简写)参数是固定写法,在调用指令时传参数,定义指令这里就要写binding参数接收,也是固定写法
                el.style.backgroundColor = binding.value.定义在data里的变量名;
            }
        })

        调用指令,和vue提供的内置指令一样的用法,可以直接调用,也可以携带参数调用,例如:
            <input type="text" v-自定义指令名>
            <input type="text" v-自定义指令名="变量"> //这种要在vue实例的data里写变量
            <input type="text" v-指令名="{变量:"值"}"> //这种直接将binging形参的value属性的实参写行内

    局部指令,定义在vue实例对象里,用directives属性定义,属性值是对象类型,只在此实例对象中有效:
        var vm = new Vue({
            directives: { //实例对象里写这个属性来自定义局部指令,属性值是对象类型
                自定义指令名1: {
                    inserted: function(el) {
                        函数体里写这个指令要实现的功能代码..;
                    }
                },  
                自定义指令名2: {
                    bind: function(el,binding){
                        指令要实现的功能代码;
                    }
                }
            }
        })
        调用:
            和vue提供的内置指令或自定义的全局指令一样的用法;

    注意:
        1.全局指令通过Vue.directive()定义,局部指令通过directives:{}定义,
            全局指令()里第一个参数是自定义的指令名,第二个参数是对象{},函数写在对象里,
            局部指令属性值就是个对象{},自定义指令名是对象里的一个属性,这个属性的值也是个对象,函数写在属性值这个对象{}里;
        2.定义指令的函数前面可以写4种变量:bind或inserted或vnode或oldVnode,这是固定写法,叫钩子函数,bind或inserted最常用,这两种除了触发函数的时间不同,其它作用都类似;
        3.函数里的参数名都是形参,也可以自己换参数名,函数实现某种功能时需要的参数通过binding接收,binding参数返回一个对象,存的是这个被调用的指令的所有描述信息,对象里有多个属性;
        4.el参数接收的是绑定这个指令的元素;
        5.局部指令可以同时定义多个指令,每个指令用,分隔;
    

vue常用特性:
    form表单常用的5种输入域,通过vue设置默认值或获取用户输入内容,v-model操作的都是value属性的值:
        普通input框:
            用v-model做双向数据绑定就行;
        单选按钮radio:
            1.用v-model做双向数据绑定,在每个input标签里写value属性,用来区分每条数据,
            v-model绑定的变量初始值是空字符串,这个变量是在data里定义的,选中哪个选项时,变量的值就会被v-model更新成哪个选项上写的value的值,
            如果在后台设置默认选中,变量的初始值要写成选中的那个选项的value属性的值,这时前台页面渲染出来的那个选项就会是选中状态;
        多选按钮checkbox,2种方式:
            1.只有一个选项时,让v-model的值直接绑定一个标志位变量,值是true表示选中,值是false表示未选中;
            2.多个选项时,用v-model做双向数据绑定,在每个input标签里写value属性,用来区分每条数据,
            v-model绑定的变量的初始值是空数组,数组变量是在data里定义的,选中哪个选项,数组变量里就会添加上哪个选项的value属性的值作为数组元素,
            如果在后台设置默认选中,数组变量的元素是要选中的那些选项的value属性的值;
            获取用户选中的数据时,数组里默认带一个元素,是对象__ob__: Observer,如果不想要,可以用toSrting()转换成字符串,得到的就是需要的纯数据;
        下拉菜单select:
            在select标签里用v-model做双向数据绑定,在每个option标签里写value属性,用来区分每条数据,
            如果默认选中一条数据,后台v-model绑定的变量值是对应要选中数据的value值,
            如果是在select标签里加了multiple属性,选中多条数据,后台v-model绑定的变量值是数组类型,数组的元素是要选中的那些数据的input标签value属性值,元素必需用''引起来;
        富文本textarea:
            在textarea标签里写v-model做双向数据绑定,将前台用户输入的内容传给后台v-model绑定的变量,将后台设置的变量值,作为默认显示内容渲染到富文本输入框里;
            注意:
                html里是将内容写在textarea标签间的,但vue里写在标签间是无效的,前台不会显示渲染到富文本框里,后台也无法获取到,只能通过v-model绑定的变量来填充和获取用户输入;
    常用表单域修饰符,3种:
        number
            将form表单里获取的字符串值转换成数值,可以直接在后台进行计算,但如果用户输入的内容里不含数字,这个修饰符就会失效,所以如果要获取用户输入数字,还不如直接将type属性写成number更有用,type属性值是text时,表单元素获取到的数据默认都是字符串类型,要在计算的时候用parseInt()取整转换数据类型:
            <input type="text" v-model.number="变量">
        trim
            将form表单里获取的字符串值的开头和结尾的空格去掉,无法去掉中间的空格,使用场景,用户名密码注册时如果不小心打有空格,数据存到数据库里,用户登录匹配时不加空格就无法登录成功,还要去找回用户名密码等麻烦的流程:
            <input type="text" v-model.trim="变量">
        lazy
            将input事件切换成change事件,v-model默认是input事件,就是用户一输入数据值就会跟着变,转换成change事件,用户输入后输入框失去焦点时数据值才变,区别就是change触发时间比input事件晚,使用场景:常用来在注册时验证用户名是否被注册过:
            <input type="text" v-model.lazy="变量">

    计算属性:
        用来处理data里的数据,简化插值表达式里的代码,因为有缓存机制,可以提高执行代码的效率,函数内部和平时定义函数里写的代码没区别,啥功能都可以写
        在vue实例对象里写computed属性,属性值是个对象,对象里写自定义的计算属性名和属性值,属性值是个函数,里面的计算逻辑代码需要用return返回,
        定义:
            var v = new Vue({
                data:{
                    变量1:'值'
                },
                computed:{
                    计算属性名:function(){
                        return this.变量1.计算逻辑代码要调用的方法;
                    }
                }
            })
        调用:
            <div>{{计算属性名}}</div>

        注意:
            计算属性computed里定义的函数和methods属性里定义的函数区别如下:
                computed里定义的函数,调用时不能加(),
                计算属性必需有return返回值,
                计算属性是基于它的依赖进行缓存的,如果在data里的变量的值没有发生变化,使用这个变量的计算属性函数就不会再次执行,不管什么html标签调用函数多少次都是直接返回第一次执行函数后缓存的结果,直到data里计算属性使用的这个变量的值发生变化才会重新执行计算属性函数;

                methods里定义的函数,调用时有参数就必需要加(),
                methods里的函数没有缓存功能,html标签调用都是直接执行这个函数,调用多少次执行多少次函数;
    
    侦听器:
        用来监听data里的数据,只要数据有变化,就会触发侦听器绑定的函数,来实现前后台的数据同步变化,在vue实例对象里,用watch属性定义,属性值是对象,对象里定义侦听器名,侦听器名必需和data里要监听的数据变量名一样,侦听器值是函数,函数的行参接收的是数据变量的最新值;
        定义:
            var v = new Vue({
                data:{
                    变量1:'值',
                    变量2:'值'
                },
                watch:{
                    侦听器名必需和data里要监听的数据变量名相,例如这里监听变量1的数据变化,侦听器名就必需叫变量1,可以同时监听多个变量,用,隔开,参数val接收的是变量1最新的数据值;
                    变量1:function(val){
                        要实现的功能的代码..;
                    },
                    变量2:function(val){
                        代码...;
                    }
                }
            })

        注意:
            简单的功能用计算属性更简洁有效率,如果是异步请求或特别庞大的数据监听就必需用侦听器实现;

    过滤器:
        用来处理数据,格式化数据,比如字符串转换大小写,格式化日期等,函数第一参数是必需参数,接收要处理的数据,从第二个参数开始可以传多个可选参数,必需有return返回数据处理结果;
        全局过滤器:
            Vue.filter('过滤器名',function(这里必需有一个参数过滤器加到哪条数据上就得到哪条数据作为参数){
                return 要实现的功能代码..;
            })
            
        局部过滤器:
            和自定义指令一样,有作用域限制,用filters属性,定义在vue的实例对象里,可以同时定义多个过滤器;
            var v = new Vue({
                filters:{
                    过滤器名:function(val){
                        return 代码...;
                    }
                }
            })

        调用:
                <div>{{数据变量名 | 过滤器名}}</div> //过滤器处理的是|前面的这条数据
                <div>{{数据变量名 | 过滤器名 | 过滤器名2}}</div> //级联写法,第2个过滤器再处理第一个过滤器处理过的数据
                <div :属性名="数据变量名 | 过滤器名"></div> //写在v-bind绑定的属性值里,过滤器处理属性值这个数据

    生命周期:
        vue的实例产生过程中有8个钩子函数可以使用,这8个钩子函数被触发的时间不同,写在钩子函数里 的功能代码就可以在不同的时间被执行:
            1.beforeCreate 在vue实例初始化之后,数据观测和事件配置之前被调用;
            2.created 在实例创建完成后立即调用;
            3.beforeMount 在挂载开始之前被调用;
            4.mounted html的标签元素被新创建的vue实例绑定的el替换,并挂载到实例上之后被调用,也就是模板都渲染好了,可以往模板里填充数据库里的数据的时候被调用,这个钩子函数比较常用;
            5.beforeUpdate 数据更新时被调用,发生在虚拟DOM打补丁之前;
            6.updated 界面发生刷新时被调用,由于数据更改导致的虚拟DOM重新渲染和打补丁,在这之后被调用;
            7.beforeDestroy vue实例对象销毁之前调用;
            8.destroyed 实例对象销毁之后调用;
            语法:
                钩子函数名:function(){
                    代码..;
                }

    vue里数组的方法:
        和js里数组方法一样的作用,唯一的区别是vue将这几种方法变成了响应式的,后台数据有变化,页面模板渲染出来的内容也立即跟着变;
        1.变异方法,会修改原数组的数据,直接调用:
            push() 在原数组的末尾添加一个或多个元素
            unshift() 在原数组的开始添加一个或多个元素
            shift() 删除数组的第一个元素
            pop() 删除数组的最后一个元素
            splice() 删除或替换数组中的元素,先删除旧元素,替换成新元素,返回删除的元素组成的新数组
            sort() 给元素进行排序,数字默认从小到大,字符串从a-z
            reverse() 翻转数组元素
        2.替换数组,不改变原数组,会生成新的数组,所以调用这些方法后需要从新赋值给原数组,数据才会响应式渲染到页面:
            filter() 遍历数组,筛选出符合过滤条件的元素放在新数组里,返回新数组,没有符合的返回空数组
            concat() 合并数组,合并一个或多个数组,参数也可以传元素
            slice() 截取数组中的元素,生成新数组
        
        除了上面提供的这些响应式方法,还可以通过索引操作数组,但索引操作不是响应式的,所以vue提供2个针对索引操作的响应式方法,都是写在实例对象外面的,和实例对象同级:
            原生js写法:数组[索引],这种不是响应式的;
            vue响应式写法,都可以操作数组和对象,2种:
                Vue.set(实例对象名.数组名, 索引, 要替换成的或添加的新的数据值); //操作数组
                实例对象名.$set(实例对象名.数组名, 索引, 要替换成的新的数据值);
                Vue.set(实例对象名.对象名, 要替换成的或添加的属性名, 属性值); //操作对象
            

组件化开发:
    组件开发思想:
        标准:
            遵守同一套标准规范,不同的程序员写出来的代码也能很好配合到一起使用;
        分治:
            不同的功能封装到不同的组件里,这样每个组件都可以独立实现某部分功能;
        重用:
            代码重用,如果项目的某一个组件实现的功能过时了,其它的组件可以继续使用,或在新的项目里继续使用;
        组合:
            组件之间通过组合的方式,可以形成一个新的项目,有新功能的应用;

    代码写长了,组件中的样式或js代码可能会有冲突,自己写的组件和别人写的组件组合时也可能会出现冲突或覆盖,标准化组织制定了web compinents组件化开发的规范,通过创建自定义标签元素,将组件功能封装在自定义标签中来解决问题,但这种规则有浏览器兼容问题,所以没有被广泛使用,vue的组件也部分使用了这个规范来实现的;
    用component()来声明组件,第一个参数是组件名,第二个参数是一个对象,对象里有2个重要属性,1是data,属性值是个函数,函数return一个对象,组件需要使用的数据都写在return的这个对象里,
    2是template属性,属性值是字符串,字符串里面是要渲染到页面的标签,这里面可以写多个标签,但必须只能有一个根标签做父级,将多个子标签包裹,否则报错,这些标签都和html标签一样,可以写模板语法,数据绑定,事件绑定,for循环等等;
    vue规定组件标签写到谁的模板里,谁就是这个组件的父组件,组件的DOM元素必需写在组件的模板里,vue在渲染模板时,会将子组件标签替换成子组件模板中的内容渲染到页面;

    注册全局组件:
        Vue.component('组件名',{
            data:function(){
                return{ //这个对象里可以写任何,比如定义函数,
                    数据1:值,
                    数据2:值,
                }
            },
            template:`<button @click="事件函数">{{数据1}}</button>`,
        })
        
    注册局部组件:
        局部组件可以写在vue实例里,也可以写在全局组件里,都是在在components属性里注册:
        直接写在components里,组件名的值是一个对象:
            components:{
                局部组件名:{
                    template:`要渲染到页面的标签`,
                }
            }
        直接定义全局变量,再去components里注册,组件名的值是全局变量名:
            var 变量名 = {
                data:function(){
                    return {
                        数据:值
                    }
                },
                template:`要渲染到页面的标签`,
            };
            var 变量名2 = {
                data:function(){
                    return {
                        数据:值
                    }
                },
                template:`要渲染到页面的标签`,
            };
            var new Vue({
                components:{
                    '组件名':变量名,
                    '组件名2':变量名2,
                }
            })

        调用组件:
            <组件名></组件名>

        注意:
            1.组件的命名规则有2种,驼峰式和- :
                例如:button-counter,或buttonCounter                
            2.调用组件:
                在html的某个标签里,将组件的名字用标签的格式写进去,在标签里调用必须要用短横线-命名规则,否则报错,如果是驼峰命名的组件,非要在标签里使用,就将每个单词都小写,用-隔开,就可以正常使用,
                如果在template字符串里调用组件,这2种命名规则的都可以,组件名什么样,这里就写什么样的,
                template里可以调用多个组件,这些在这里调用的组件就变成了template所在的这个组件的儿子组件,调用的多个子组件都必需用一个标签包裹起来,否则报错;
                组件名可以在html的标签里多次调用,每次调用都会产生一个独立的组件实例,这些实例之间互不影响,独立执行;
            3.组件里面也可以写methods属性,和vue实例里的methods属性一样的作用;
            4.data属性值必须是函数,return后面必需是对象,如果没有数据要处理,组件的data属性可以省略不写;
            5.局部组件只能在注册它的components属性所在的vue实例里使用,调用组件也只在vue实例对象el属性绑定的标签里有效;
            6.全局组件标签写在哪个组件的template模板里,它就是哪个组件的孩子;
            7.全局组件一个component里只能写一个,局部组件可以同时在components里写多个,
            局部组件的语法格式是通过将对象变量名写vue实例外面,再在compinents属性里注册,注册时通过'组件名':对象变量名的方式;


    组件调试工具:
        因为组件最终会渲染成template里写的html标签,在控制台查看时和其它的html标签没区别,这样就很难区分到底是组件还是普通标签,用vue的组件调试工具,就能清楚区分,还能看到组件之间的层级结构,点击组件名,会在旁边显示数据,可以直接在调试工具里修改数据值,页面渲染的内容会同步发生变化;
        下载:去vue官网----点击生态系统的Devtools----点击Get the Chrome Extension /(beta channel)会跳转到谷歌的应用商店,下载这个插件就行了,下载成功后必须打开右上角的开发者模式,否则调试工具不能使用;
        

    组件间的数据交互3种:
        vue实例也是组件,而且是(根)父组件,全局组件和局部组件都是vue实例的子组件,
        1.父组件通过自定义属性向子组件传数据,
        2.子组件通过自定义事件向父组件传数据,
        3.兄弟组件通过事件中心向兄弟组件传数据,

        父组件向子组件传数据:
            1.调用的子组件标签上写一个动态绑定的自定义属性,属性值是父组件data中存数据的变量名,或直接是个值,如果是布尔值,必需要动态绑定属性,否则true或false会被当成普通字符串对待;
                <子组件标签 自定义属性名="值"></子组件标签>
                <子组件标签 :自定义属性名="父组件里存数据的变量名"></子组件标签>
            2.子组件内部通过props属性接收父组件传的数据,属性值是个数组,数组元素是子组件标签上写的自定义属性名,
            props:['自定义属性名1','自定义属性名2']
            属性验证:
                为了避免别人调用组件时,给自定义属性传错误的数据类型的值,导致组件出bug,可以将props属性的值写成一个对象,对象里的键是自定义属性名,值是6种数据类型,这样调用组件标签里写的自定义属性的值就必需是props对象里规定的数据类型,否则报错;
                如果某个自定义属性的值不需要限制数据类型,可以给这个自定义属性设置个null值;
                props:{
                    自定义属性名1:String, //这个属性名在子组件标签里的值必须是字符串类型
                    自定义属性名2:Number, //这个必须是数字类型的值
                    自定义属性名3:null,   //这个可以传任何类型的值
                }
            3.在子组件的模板里使用父组件传来的数据,直接使用写在props数组里的自定义属性名就行;
                template:`<div>{{自定义属性名}}</div>`,
            注意:
                1.props属性传数据的原则是单向数据流,只能父向子传值,不能子向父传值,虽然子向父传值也可以成功,但不推荐;
                2.如果写在props数组里的属性名,没在组件标签里定义,但写在了template里使用,渲染到页面上会显示undefined;
                3.如果自定义属性名是驼峰命名写法,在普通html标签里使用必需写成短横线-的写法,否则传值不成功,还会在控制台警告,但在template的标签里使用是驼峰或-的都可以;
            自定义属性可以传6种数据类型的值:
                String字符串/Number数值/Boolean布尔值/Array数组/Object对象/Function函数;
                如果不是在自定义属性后面直接写值,就必需用v-bind动态绑定属性,否则渲染出来的是插值表达式里写的原始内容(存数据的变量名),而不是变量的值,
                动态属性值的数据类型是根据存数据的变量的值决定的;
        
        子组件向父组件传数据:
            1.子组件通过在模板标签里写v-on绑定事件,事件的值是$emit("自定义事件名",要传给父组件的数据)向父组件传数据,或在子组件中定义的事件函数,语法:
                template:`
                    <标签 @click="$emit('自定义事件名','要传给父组件的数据')"></标签>`
            或:
                template:`
                    <标签 @click="定义在子组件里的函数名()"></标签>`,
                methods:{
                    函数名(){
                        //$emit是分发、触发事件的方法
                        this.$emit('子组件标签里写的自定义事件名',要传给父组件的数据); 
                    }
                }
            2.父组件接收数据,需要在调用的子组件标签里写v-on绑定自定义事件名,给自定义事件绑定在父组件里定义的事件函数,来监听子组件的数据是否变化,数据变化时触发函数,并在函数调用这里通过$event参数接收子组件传过来的数据,再去父组件的函数里通过形参接收拿到的子组件的数据,语法:
                <子组件名 @自定义事件名="父组件里定义的函数名($event)"></子组件名>
            3.父组件里定义函数,函数有个形参,接收$event携带的实参:
                var vm = new Vue({
                    el:'标签名',
                    methods:{
                        函数名:function(val){
                            对形参接收到的实参也就是子组件传来的数据处理的一些代码..;
                        }
                    }
                })

        非父子组件之间互相传数据:
            1.单独写一个空的vue实例对象,作为事件中心(中央事件总线),管理兄弟组件的数据传输,不管隔多少代的子组件,都可以通过事件中心互传数据,事件中心充当的是中介的作用,兄弟组件可以看成房东和租房的,语法:
                var hub = new Vue();  //写在vue实例外面,和装有子组件的vue实例同级
            2.在A组件里使用mounted钩子函数,当这个函数被触发时,表示模板已经加载好,可以填充数据进行渲染了,在这个函数里,用事件中心调用$on()监听事件,接收兄弟组件的数据,第一个参数是自定义的事件监听名,第二个参数是个函数,函数的参数接收兄弟组件传过来的数据,如果函数里要用this,最好写成箭头函数,否则this指向window,
            监听事件写法:
                mounted:function(){
                    hub.$on('本组件的监听事件名',(箭头函数参数)=>{
                        操作参数也就是兄弟组件传过来的数据的代码..;
                    })
                }
            3.在B组件里使用methods属性里定义函数,函数是在template的标签的事件绑定里调用的,当标签里写的事件绑定函数被触发,就会执行写在这个函数里的触发事件$emit(),发送数据给兄弟组件,$emit()用事件中心调用,参数1是兄弟A组件的监听事件名,参数2是要传给兄弟A组件的数据,
            触发事件的写法:
                methods:{
                    执行监听的标签事件绑定后面的函数名:function(){
                        hub.$emit('对方组件的监听事件名',要传给对方的数据)
                    }
                }
            4.用事件中心调用$off()销毁事件,参数是要销毁的监听事件名,可以在父组件中定义函数销毁事件,也可以在使用$on的组件中销毁事件,执行了销毁事件后事件监听$on()就会失效,
            销毁事件的写法:
                methods:{
                    执行销毁的标签事件绑定后面的函数名:function(){
                        hub.$off('要销毁的组件的监听事件名')
                    }
                }

        ref通信:
            ref 被用来给元素或子组件注册引用信息。引用信息将会注册在父组件的 $refs 对象上。如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；如果用在子组件上，引用就指向组件实例：
            ref属性写在普通标签上:
                <div>
                    <input ref="自定义名字1"></input> 
                </div>
                var vm = new Vue({
                    el:'div',
                    methods:{
                        函数1(){
                            //$refs接收所以用ref绑定的标签或子组件,这里得到的是整个input标签,如果要获取输入框里的内容,只要继续.value就行;
                            this.$refs.自定义名字1;  
                        }
                    }
                })
        ref写在子组件上:
            <div>
                <子组件名 ref="自定义名字2"></子组件名> 
            </div>
            var vm = new Vue({
                    el:'div',
                    methods:{
                        函数2(){
                            //$refs接收所以用ref绑定的标签或子组件,这里得到的是整个子组件实例对象,
                            如果要获取子组件里的数据和方法(子组件向父组件传数据),只要继续.数据变量名和.方法名()就行,
                            如果父向子传数据,用.方法名(要传给子的数据),子组件里写的方法(参数)就能接收到数据;
                            this.$refs.自定义名字2;  //得到子组件实例对象
                            this.$refs.自定义名字2.数据变量名2;  //得到子组件data里的数据
                            this.$refs.自定义名字2.方法名2();  //得到子组件methods里的方法
                            this.$refs.自定义名字2.方法名2(要传给子的数据); //向子传数据
                        }
                    },
                    components:{
                        子组件:{
                            data:function(){
                                return{
                                    数据变量名2:'值'
                                }
                            },
                            methods:{
                                方法名2(val){ //这个参数val接收父组件传的数据
                                    console.log(val); 
                                }
                            }
                        }
                    }
                })
            注意:
                ref虽然传数据比上面学的组件之间传数据要简单方便的多,但耦合性太高,尽量少用;
                $refs只在组件渲染完成后才填充,并且非响应式的,它仅仅是一个直接操作子组件的应急方案,应当避免在模板或计算属性里使用$refs;

        组件插槽:
            用来接收调用组件时写在组件标签间的内容,相当于手机卡槽,先占个位置,用户要用的时候插什么运营商的卡都行,
            在组件的template里写<slot>标签,这个标签是vue的API,是固定写法,这个标签会获取调用组件时写在组件标签间的内容,还可以直接在这个标签中写内容,表示设置默认显示内容,如果调用组件时标签间没写内容,就会将slot标签间的默认内容显示到页面,如果调用组件时标签间写了内容,就会覆盖slot标签间的默认内容,将新内容渲染到页面;
            调用子组件:
                //因为子组件是写在父组件的模板里调用,所以子组件中间的span标签实际上也是写在父组件的模板中的,这个span标签属于父的模板内容,能直接访问父组件里的数据和方法等,但位置又是写在子组件标签间,vue在加载子组件模板渲染到页面时,这个span标签就会被子组件模板里的内容替换掉,无法渲染,子组件要想不替换这个写在父组件模板里的span标签,必需通过写在子组件模板里的插槽<slot>标签接收,这样span标签既可以直接访问父组件的数据,又能正常在子组件里渲染,子组件想访问父组件的数据,可以通过span标签直接访问,就不用再父向子传数据那么麻烦了;
                <子组件名><span></span></子组件名> 
            子组件模板写法:
                template:`<div>
                    <slot></slot> //通过插槽接收后,就等于把<span></span>写这位置了
                </div>`
        
        
    具名插槽:
        vue2.6版本开始具名插槽就废弃了<div slot="插槽名"></div>这种写法,
        改成了插槽名写在<template v-slot:item-text></template>标签上,里面可以写一个或多个dom元素,属性后面是:不是=,而且属性值不能有空格和'',可以把v-slot简写成#号,如果是没名字的插槽,简写有参数要传时,#后面必需带上插槽默认名字default,不能直接写#={};
            <template v-slot:item-text></template>
            <template #item-text="{ 要传的参数 }"></template>
        下面是vue2.6以下的版本的具名插槽写法:
            就是具有名字的插槽,slot标签里写name属性,给这个插槽取名字,
            在调用组件时,组件里面写普通标签,普通标签写slot属性,值就是插槽名,这样slot标签获取组件标签间内容时,会先根据插槽名进行匹配,再将组件间的内容填充到对应的模板标签里,渲染到页面;
            只匹配一个标签,将slot属性="插槽名"直接写在标签上,
            匹配多个标签,将slot属性="插槽名"写在template标签上,template标签是vue提供的临时包裹多个标签的容器,渲染到页面时不会显示在html结构中;
            写法:
            template:`
                <div>
                    <strong>提示信息:</strong>//调用组件时写在组件标签间的内容会渲染在这后面
                    <slot></slot> //没名字的插槽
                    <header>
                        <slot name="header"></slot> //有名字的插槽
                    </header>
                    <footer>
                        <slot name="footer">默认内容</slot> //有名字和默认值的插槽
                    </footer>
                </div>
            `,
            有名字的插槽匹配一个标签,演示:
                <组件名>
                    <p slot="header">头部信息,传给名是header的插槽</p>
                    <p>主体信息1,都会传给没有名字的插槽,也就是strong标签下面那个插槽</p>
                    <p>主体信息2,都会传给没有名字的插槽</p>
                    <p slot="footer">底部信息,传给名是footer的插槽</p>
                </组件名>
            有名字的插槽匹配多个标签,演示:
                <组件名>
                    <template slot="header">
                        <p>头部信息1,传给名是header的插槽</p>
                        <p>头部信息2,传给名是header的插槽</p>
                    </template>
                    <template slot="footer">
                        <p>底部信息1,传给名是footer的插槽</p>
                        <p>底部信息2,传给名是footer的插槽</p>
                        <p>底部信息3,传给名是footer的插槽</p>
                    </template>
                </组件名>

        作用域插槽:
            应用场景:父组件可以对子组件的传给父组件的数据内容进行加工和处理;
            在子组件模板里写插槽,在插槽上写一个属性,属性名自定义,值是子组件获取到的父组件的数据变量名,动态绑定这个属性,演示:
                props:['父数据']
                template:`
                    <div>
                        <li>
                            <slot :自定义属性名="父数据">{{父数据}}</slot>
                        </li>
                    </div>                   
                `,
            调用子组件时,在组件标签里写一个template标签,在template标签上写一个属性slot-scope属性,是固定写法,值是自定义的变量名,用来接收插槽传过来的自定义属性,再写插值表达式,在插值表达式里使用 自定义变量名.插槽里的自定义属性名 来获取数据,就可以对获取到的数据进行再次处理了,比如给某条数据字体大小改一下,颜色改一下等;
            演示:
                <组件名>
                    <template slot-scope="自定义变量名">
                        <strong>{{自定义变量名.插槽的自定义属性名}}</strong> //这是用strong标签给显示的数据加粗
                    </template>
                </组件>
            vue2.6以上版本这样写:
                <组件名>
                    <template v-slot:default="自定义变量名">
                        <strong>{{自定义变量名.插槽的自定义属性名}}</strong> //这是用strong标签给显示的数据加粗
                    </template>
                </组件>

        独占默认插槽的缩写语法:
            当最终组件里要展示的内容只有默认插槽替换后的内容时，组件的标签才可以被当作插槽的模板来使用。这样我们就可以把 v-slot 直接用在组件上：
                <组件名 v-slot:default="slotProps">
                {{ slotProps.user.firstName }}
                </组件>
            简写,不带默认插槽名default:
                <current-user v-slot="slotProps">
                {{ slotProps.user.firstName }}
                </current-user>
            接收参数还可以简写成 {} 解构的写法:
                <current-user v-slot={user}>
                {{ user.firstName }}
                </current-user>
            或把接收到的参数重命名:
                <current-user v-slot={user:uname}>
                {{ uname.firstName }}
                </current-user>
            注意默认插槽的缩写语法不能和具名插槽混用，因为它会导致作用域不明确：
              
               
        2.6.0 新增动态指令参数也可以用在 v-slot 上，来定义动态的插槽名：
            <组件名>
            <template v-slot:[dynamicSlotName]>
                ...
            </template>
            </组件>

            
        动态组件:
            在调用子组件时,不写子组件标签,而是写vue提供的<component>标签,通过动态绑定此标签的is属性来动态控制加载哪个子组件,is属性后面的值可以直接是某个子组件名,也可以是个定义在父组件data里的变量,变量的值是不同的子组件名,
            is属性的值从原来的值改变成新的值,新的子组件就被加载,原来加载的子组件被销毁,
            可以在<component>标签外面套一个vue提供的<keep-alive>标签,单词是保持活着的意思,会保留原来加载的子组件的状态,避免重新加载渲染;
                <keep-alive>
                    <component :is="某个子组件名"></component>
                </keep-alive>




                




        
        
    

 
    

        
            





            

    
