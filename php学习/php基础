软件的构架模式一般分2种:
    C/S(客户端client -> 服务端server)
        将软件下载安装才能访问;
    B/S(浏览器browser -> 服务端)
        直接打开浏览器输入url就能访问;
混合式开发:
    现在很多软件都混合式开发,c/s和b/s结合进行开发;

服务器:
    和客户端是个相对概念,服务器是资源提供方,客户端是享用资源方,我们平时上网是访问别人电脑上的数据,此时别人电脑就是服务器,我们就是客户端,让别人的电脑也可以访问到自己电脑某个磁盘的数据,此时自己电脑就是个服务器,来访问的别人就是客户端;

    对外开放要通过apache这个软件,apache安装运行在自己的电脑上哪个磁盘,哪个磁盘的apache所在文件夹的 htdocs文件夹 就是对外可见,放在这个文件夹里的所有数据都可以让别人通过ip或域名访问的;
    只能是用同一个局域网的人访问,如果要全网访问,得去买域名或去阿里腾讯等租服务器,它们有临时域名提供;

    现在自己的电脑有点像自己的家,是私有的,不对外开放,服务器就像把家某个部分开成超市,别人就能进你开放的那部分区域浏览商品买东西,开放的区域相当于电脑的某部分磁盘,商品相当于自己开放的磁盘上的数据,别人是可以通过我给的ip地址+路径访问到的;

    访问:
        htdocs文件夹是对外开放能让别人访问的, 是服务器的根目录,可以通过3种方法直接访问index开头的文件(index.php,index.html,index.jsp):
            1. localhost 直接访问本地电脑服务;
            2. 127.0.0.1 直接访问本地电脑服务;
            3. IP 访问当前电脑服务;

            
集成开发环境,3种:
    单独安装apache软件要配置要搭环境,太麻烦,所以用集成开发包(软件套装,别人把前后端交互所需要几个软件打包在一起),能一键安装,并且套装自己会将每个软件之间的配置文件设置好,让软件们能相互合作,我们可以直接使用;

    1.WAMP  是windows系统 + apache服务器 + mysql数据库 + php后端的脚本语言;
    2.LAMP  是linux系统 + apache服务器 + mysql数据库 + php脚本语言;
    3.PHPnow 是apache服务器 + mysql数据库 + php脚本语言;


PHP(Hypertext Preprocessor)是 超文本预处理器, 是一种通用开源的脚本语言,在服务器上运行,前后端都可以写;
php不支持中文,所以文件名不能带中文,否则可能报错;
php代码兼容html和css所有代码,它的输出函数会自动解析标签并渲染css样式输出到页面上;
php代码非常严格,每一句代码后面都要加;否则报错

输出,3种:
    1. echo "要输出的内容";
       echo("要输出的内容");
    2. print_r("要输出的内容");
    3. var_dump("要输出的内容");  
        类似console.log(),能输出详细信息,类型/长度/"内容"等..测试程序用的;
        在调试控制台输出时还会把路径和哪一行的信息也输出;

用$声明变量:
    是弱引用类型,赋什么类型的值,就是什么数据类型;
    $age = 18;  $name = "小花";

拼接字符串,2种:
    .  用.拼接,  例如: "我是".$name."我今年".$age."岁了";
    {} 用{}拼接, 例如: "我是{$name}我今年{$age + 2}岁了";


分支语句,2种:
    if($变量名或表达式){
        echo "输出内容";
    }else{
        echo "输出内容";
    }

    switch($变量名或表达式){
        case 值:
            echo "输出内容";
            break;
        case 值:
            echo "输出内容";
            break;
        default:
            echo "输出内容";
            break;
    }


声明函数:
    function 函数名() {
        代码...
    }


循环,即使上面声明过的变量,使用时每个变量都还要写上$符号:
    for($i = 0; $i < 5; $i++) {
        代码..
    }


数组,3种类型:
    1. 索引数组   下标是数字的叫做索引数组;
    2. 关联数组   下标是字符串的叫关联数组,键值对的存储格式; 类似js的map映射集合;
    3. 全局数组,2种:   
        $_GET 接收通过get提交过来的所有数据;
        $_POST 接收通过post提交过来的所有数据;

    索引数组和关联数组可以结合使用,组成多维数组:
        $arr = array(
            array("键"=>"值","键"=>值),
            array("元素1","元素2","元素3")
        );


    声明数组,只能通过array()声明:
        索引数组: $arr = array("元素1","元素2","元素3"); 
        关联数组: $arr = array("键"=>"值","键"=>值);

    获取数组的元素:
        $数组名[下标];
        $数组名["键"];
        $数组名[下标]["键"]; 这是取多维数组的;

    获取数组长度:
        count($数组名);

    遍历数组:
        索引数组和多维数组:
            for($i = 0; $i < count($数组名); $i++) {
                代码..;
            }
        关联数组:
            foreach($数组名 as $key => $value) {
                代码...;
            }


    数组内置方法:
        array_keys(数组名,value,strict)
            获取数组所有的键名;
            参数:
            array	必需。规定数组。
            value	可选。您可以指定键值，然后只有该键值对应的键名会被返回。
            strict	可选。与 value 参数一起使用。可能的值：
                true - 返回带有指定键值的键名。依赖类型，数字 5 与字符串 "5" 是不同的。
                false - 默认值。不依赖类型，数字 5 与字符串 "5" 是相同的。
            返回值：	
                返回包含数组中所有键名的一个新数组。

        array_pop(数组名)
            删除数组中的最后一个元素;
            返回值：	
                返回数组的最后一个值。如果数组是空的，或者不是一个数组，将返回 NULL。

        array_shift(数组名)
            删除数组中的第一个元素;
            返回值：	
                返回被删除的值。如果数组是空的，或者不是一个数组，将返回 NULL。
                再输出删除后的数组时,如果数组的键名是数字的，删除第一个元素后,第二个元素的键名变成0了,以此类推,所有元素都将获得新的键名，从 0 开始，并以 1 递增;
        
        array_push(数组名,元素...) 
            向数组尾部插入一个或多个元素;
            参数:
                array  一个数组;
                value  可以添加一个或者多个值;
                关联数组中即使数组有字符串键名，添加的新元素自动生成数字键名,添加的是元素的值。

        array_chunk(array,size,preserve_keys) 
            把一个数组分割为新的多维数组;
            参数:	
                array	必需。要分割的数组。
                size	必需。一个整数，规定每个新数组块包含多少个元素。
                preserve_key 可选:
                    true - 保留原始数组中的键名。
                    false - 默认值。每个新数组块使用从零开始的索引。
            返回值：	
                返回一个多维数组，多维数组里的子数组都是关联数组格式,每个子数组都包含 size 个元素,默认新多维数组里的每个子数组的元素,键都是自动生成的数字,从0开始,可以用第三个参数写true将原数组的键保留下来。

        array_column(array,column_key,index_key) 
            返回输入的多维数组中某个单一列的值,比如第一列,就会取出每个子数组的第一个元素,这是只有多维数组能用的方法。
            参数:	
                array	必需。原多维数组（记录集）。
                column_key	必需。列(键名或索引),这一列的值会变成返回的新数组的值。
                    可以是索引数组的列的整数索引，或者是关联数组的列的字符串键值。
                    该参数也可以是 NULL，此时将返回整个数组（配合index_key 参数来重置返回的新数组的键的时候，非常管用）。
                index_key	可选。作为返回数组的索引/键的列,这一列的值会变成返回的新数组的键,
                    不写这个参数,系统默认自动生成数字做键,从0开始。
            返回值：	
                返回一个新数组，数组的值为输入数组中某个单一列的值。

        array_combine(keys,values)
            通过合并两个数组来创建一个新数组，其中第一个数组元素为键，第二个数组的元素为值。
            相当于将2个索引数组变成1个关联数组;
            注意:
                键名数组和键值数组的元素个数必须相同！
            参数:	
                keys	必需。做键名数组。
                values	必需。做值数组。
            返回值：	
                返回合并后的关联数组。如果两个数组的元素个数不相同，则返回 FALSE。

        in_array ( mixed $needle , array $haystack [, bool $strict = FALSE ] )
            检查数组中是否存在指定的值;
            参数	
                needle	必需。规定要在数组搜索的值。
                haystack	必需。规定要搜索的数组。
                strict	可选。默认值是FALSE,如果该参数设置为 TRUE，
                    则 in_array() 函数检查搜索的数据与数组的值的数据类型必需相同才能匹配上。
            返回值：
            	如果在数组中找到值则返回 TRUE，否则返回 FALSE。

    array_rand(array,number) 
        返回数组中的一个或多个随机键名，
        参数:
            array	必需。原数组。
            number	可选。数字,规定返回多少个随机的键名。
        返回值:
            number个键名, 如果number是1,就返回键名,
            如果number大于1,则返回一个数组,元素是number个随机键名。

        
